<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hypar.Elements</name>
    </assembly>
    <members>
        <member name="T:Elements.Analysis.AnalysisMesh">
            <summary>
            A visualization of computed values at locations in space.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/AnalysisMeshTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Analysis.AnalysisMesh.TotalAnalysisLocations">
            <summary>
            The total number of analysis locations.
            </summary>
        </member>
        <member name="P:Elements.Analysis.AnalysisMesh.ULength">
            <summary>
            The length of the cells in the u direction.
            </summary>
        </member>
        <member name="P:Elements.Analysis.AnalysisMesh.VLength">
            <summary>
            The length of the cells in the v direction.
            </summary>
        </member>
        <member name="P:Elements.Analysis.AnalysisMesh.Perimeter">
            <summary>
            The perimeter of the analysis mesh.
            </summary>
        </member>
        <member name="P:Elements.Analysis.AnalysisMesh.ColorScale">
            <summary>
            The color scale used to represent this analysis mesh.
            </summary>
        </member>
        <member name="M:Elements.Analysis.AnalysisMesh.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,Elements.Analysis.ColorScale,System.Func{Elements.Geometry.Vector3,System.Double},System.Guid,System.String)">
            <summary>
            Construct an analysis mesh.
            </summary>
            <param name="perimeter">The perimeter of the mesh.</param>
            <param name="uLength">The number of divisions in the u direction.</param>
            <param name="vLength">The number of divisions in the v direction.</param>
            <param name="colorScale">The color scale to be used in the visualization.</param>
            <param name="analyze">A function which takes a location and computes a value.</param>
            <param name="id">The id of the analysis mesh.</param>
            <param name="name">The name of the analysis mesh.</param>
        </member>
        <member name="M:Elements.Analysis.AnalysisMesh.Tessellate(Elements.Geometry.Mesh@,Elements.Geometry.Transform,Elements.Geometry.Color)">
            <summary>
            Tessellate the analysis mesh.
            </summary>
            <param name="mesh"></param>
            <param name="transform"></param>
            <param name="color"></param>
        </member>
        <member name="M:Elements.Analysis.AnalysisMesh.Analyze">
            <summary>
            Compute a value for each grid cell.
            </summary>
        </member>
        <member name="T:Elements.Analysis.ColorScale">
            <summary>
            A range of colors interpolated between
            a number of key values.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ColorScaleTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Analysis.ColorScale.Colors">
            <summary>
            The colors of the scale.
            </summary>
        </member>
        <member name="M:Elements.Analysis.ColorScale.#ctor(System.Collections.Generic.List{Elements.Geometry.Color})">
            <summary>
            Construct a color scale.
            </summary>
            <param name="colors">The colors which define the color scale.</param>
        </member>
        <member name="M:Elements.Analysis.ColorScale.#ctor(System.Collections.Generic.List{Elements.Geometry.Color},System.Int32)">
            <summary>
            Construct a color scale.
            </summary>
            <param name="colors">The color scale's key values.</param>
            <param name="colorCount">The number of colors in the final color scale
            These values will be interpolated between the provided colors.</param>
        </member>
        <member name="M:Elements.Analysis.ColorScale.GetColorForValue(System.Double)">
            <summary>
            Get the color from the color scale most closely 
            approximating the provided value.
            </summary>
            <param name="t">A number between 0.0 and 1.0</param>
            <returns>A color.</returns>
        </member>
        <member name="T:Elements.Beam">
            <summary>
            A structural framing element defined by a center line curve and a profile.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/StructuralFramingTests.cs?name=example)]
            </example>
        </member>
        <member name="M:Elements.Beam.#ctor(Elements.Geometry.Curve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double,System.Double,Elements.Geometry.Transform,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a beam.
            </summary>
            <param name="curve">The beam's center line.</param>
            <param name="profile">The beam's profile.</param>
            <param name="material">The beam's material.</param>
            <param name="startSetback">The setback of the beam's geometry at the start.</param>
            <param name="endSetback">The setback of the beam's geometry at the end.</param>
            <param name="rotation">An optional rotation of the beam's cross section around it's axis.</param>
            <param name="transform">The beam's transform.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the transform.</param>
            <param name="name">The name of the transform.</param>
        </member>
        <member name="T:Elements.Brace">
            <summary>
            A Brace is a structural framing element which is often diagonal.
            </summary>
        </member>
        <member name="M:Elements.Brace.#ctor(Elements.Geometry.Curve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double,System.Double,Elements.Geometry.Transform,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a Brace.
            </summary>
            <param name="curve">The brace's center line.</param>
            <param name="profile">The brace's profile.</param>
            <param name="material">The brace's material.</param>
            <param name="startSetback">The setback of the brace's geometry at the start.</param>
            <param name="endSetback">The setback of the brace's geometry at the end.</param>
            <param name="rotation">An optional rotation of the beam's profile around its axis.</param>
            <param name="transform">The brace's transform.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The brace's id.</param>
            <param name="name">The brace's name.</param>
        </member>
        <member name="T:Elements.BuiltInMaterials">
            <summary>
            Built in materials.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Glass">
            <summary>
            Glass.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Steel">
            <summary>
            Steel.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Default">
            <summary>
            The default material.
            </summary>
        </member>
        <member name="F:Elements.BuiltInMaterials.Concrete">
            <summary>
            Concrete.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Mass">
            <summary>
            Default material used to represent masses.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Wood">
            <summary>
            Wood.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Edges">
            <summary>
            Edges
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Topography">
            <summary>
            Topography
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.EdgesHighlighted">
            <summary>
            Edges Highlighted
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.XAxis">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.YAxis">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.ZAxis">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Trans">
            <summary>
            Fully transparent material.
            </summary>
        </member>
        <member name="T:Elements.Column">
            <summary>
            A vertical structural framing element.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ColumnTest.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Column.Location">
            <summary>
            The location of the base of the column.
            </summary>
        </member>
        <member name="P:Elements.Column.Height">
            <summary>
            The height of the column.
            </summary>
        </member>
        <member name="M:Elements.Column.#ctor(Elements.Geometry.Vector3,System.Double,Elements.Geometry.Profile,Elements.Material,Elements.Geometry.Transform,System.Double,System.Double,System.Double,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a Column.
            </summary>
            <param name="location">The location of the base of the column.</param>
            <param name="height">The column's height.</param>
            <param name="profile">The column's profile.</param>
            <param name="material">The column's material.</param>
            <param name="transform">The column's transform.</param>
            <param name="startSetback">The setback of the column's extrusion from the base of the column.</param>
            <param name="endSetback">The setback of the column's extrusion from the top of the column.</param>
            <param name="rotation">An optional rotation of the column's profile around its axis.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The column's id.</param>
            <param name="name">The column's name.</param>
        </member>
        <member name="T:Elements.ContentCatalog">
            <summary>A collection of ContentElements</summary>
        </member>
        <member name="M:Elements.ContentCatalog.ToJson">
            <summary>
            Convert the ContentCatalog into it's JSON representation.
            </summary>
        </member>
        <member name="M:Elements.ContentCatalog.FromJson(System.String)">
            <summary>
            Deserialize the give JSON text into the ContentCatalog
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:Elements.ContentCatalog.Content">
            <summary>The content elements in this catalog.</summary>
        </member>
        <member name="T:Elements.ContentElement">
            <summary>An element representing user content.</summary>
        </member>
        <member name="M:Elements.ContentElement.#ctor(System.String,Elements.Geometry.BBox3,System.Double,Elements.Geometry.Vector3,Elements.Geometry.Transform,Elements.Material,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String,System.String)">
            <summary>
            This constructor adds the ability to include additionalProperties.  The additional properties should be 
            a dictionary that has been serialized to a string, they are deserialized during construction.
            This is used in Revit Content workflows to store instance parameter data.
            </summary>
            <param name="gltfLocation">The path to the .glb file.</param>
            <param name="boundingBox">The BBox3 of this Content Element.</param>
            <param name="gltfScaleToMeters">The number required to scale this contents dimensions to meters.  Used during gltf merging.</param>
            <param name="sourceDirection">The direction the element was facing when it was extracted from it's source.</param>
            <param name="transform">The transform of this ContentElement.</param>
            <param name="material">The material, used for the BBox representation of this element.</param>
            <param name="representation">The representation which will be updated when needed.</param>
            <param name="isElementDefinition">Should the element be used to create instances, or should it be inserted into a 3D scene.</param>
            <param name="id">The guid of this element.</param>
            <param name="name">The name of this element.</param>
            <param name="additionalProperties">The string json serialization of a dictionary of additional parameters.</param>
        </member>
        <member name="M:Elements.ContentElement.UpdateRepresentations">
            <summary>
            Update the ContentElement representation with a solid of the
            Bounding Box.  This is used in the absence of finding a the
            Gltf for import.
            </summary>
        </member>
        <member name="P:Elements.ContentElement.GltfLocation">
            <summary>The URI of the gltf for this element.</summary>
        </member>
        <member name="P:Elements.ContentElement.BoundingBox">
            <summary>The bounding box of the content.</summary>
        </member>
        <member name="P:Elements.ContentElement.GltfScaleToMeters">
            <summary>The scale needed to convert the gltf to meters.</summary>
        </member>
        <member name="P:Elements.ContentElement.SourceDirection">
            <summary>A vector indicating the direction the source object was originally facing.</summary>
        </member>
        <member name="T:Elements.DirectionalLight">
            <summary>
            A directional light.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/LightTests.cs?name=directional_example)]
            </example>
        </member>
        <member name="M:Elements.DirectionalLight.#ctor(Elements.Geometry.Color,Elements.Geometry.Transform,System.Double,System.Guid,System.String)">
            <summary>
            Create a directional light.
            </summary>
            <param name="color">The color of the light.</param>
            <param name="intensity">The intensity of the light measured in lux.</param>
            <param name="transform">The light's transform.</param>
            <param name="id">The unique identifier of the light.</param>
            <param name="name">The name of the light.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.Element">
            <summary>
            An object which is identified 
            with a unique identifier and a name.
            </summary>
            <summary>A uniquely identifiable element.</summary>
        </member>
        <member name="P:Elements.Element.Id">
            <summary>A unique id.</summary>
        </member>
        <member name="P:Elements.Element.Name">
            <summary>A name.</summary>
        </member>
        <member name="T:Elements.ElementInstance">
            <summary>
            An instance of an element in the model.
            Instances point to one instance of a type, but have
            individual ids and transforms.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ElementInstanceTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.ElementInstance.BaseDefinition">
            <summary>
            The element from which this instance is derived.
            </summary>
        </member>
        <member name="P:Elements.ElementInstance.Transform">
            <summary>
            The transform of the instance.
            </summary>
        </member>
        <member name="M:Elements.ElementInstance.#ctor(Elements.GeometricElement,Elements.Geometry.Transform,System.String,System.Guid)">
            <summary>
            Construct an element instance.
            </summary>
            <param name="baseDefinition">The definition from which this instance is derived.</param>
            <param name="transform">The transform of the instance.</param>
            <param name="name">The name of the instance.</param>
            <param name="id">The id of the instance.</param>
        </member>
        <member name="T:Elements.Floor">
            <summary>
            A floor is a horizontal element defined by a profile.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/FloorTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Floor.Elevation">
            <summary>
            The elevation from which the floor is extruded.
            </summary>
        </member>
        <member name="P:Elements.Floor.Thickness">
            <summary>
            The thickness of the floor.
            </summary>
        </member>
        <member name="P:Elements.Floor.Profile">
            <summary>
            The untransformed profile of the floor.
            </summary>
        </member>
        <member name="P:Elements.Floor.Openings">
            <summary>
            A collection of openings in the floor.
            </summary>
        </member>
        <member name="M:Elements.Floor.#ctor(Elements.Geometry.Profile,System.Double,Elements.Geometry.Transform,Elements.Material,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Create a floor.
            </summary>
            <param name="profile">The perimeter of the floor.</param>
            <param name="thickness">The thickness of the floor.</param>
            <param name="transform">The floor's transform. Create a transform with a Z coordinate for the origin, to define the elevation of the floor.</param>
            <param name="material">The floor's material.</param>
            <param name="representation">The floor's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The floor's id.</param>
            <param name="name">The floor's name.</param>
        </member>
        <member name="M:Elements.Floor.ProfileTransformed">
            <summary>
            Get the profile of the floor transformed by the floor's transform.
            </summary>
        </member>
        <member name="M:Elements.Floor.Area">
            <summary>
            The area of the floor.
            </summary>
            <returns>The area of the floor, not including the area of openings.</returns>
        </member>
        <member name="M:Elements.Floor.Volume">
            <summary>
            The area of the floor.
            </summary>
            <returns>The area of the floor, not including the area of openings.</returns>
        </member>
        <member name="M:Elements.Floor.UpdateRepresentations">
            <summary>
            Update the representations.
            </summary>
        </member>
        <member name="M:Elements.Floor.AddOpening(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add an opening.
            </summary>
            <param name="width">The width of the opening.</param>
            <param name="height">The height of the opening.</param>
            <param name="x">The distance to the center of the opening along the host's x axis.</param>
            <param name="y">The distance to the center of the opening along the host's y axis.</param>
            <param name="depthFront">The depth of the opening along the opening's +Z axis.</param>
            <param name="depthBack">The depth of the opening along the opening's -Z axis.</param>
        </member>
        <member name="M:Elements.Floor.AddOpening(Elements.Geometry.Polygon,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add an opening in the wall.
            </summary>
            <param name="perimeter">The perimeter of the opening.</param>
            <param name="x">The distance to the origin of the perimeter along the host's x axis.</param>
            <param name="y">The height to the origin of the perimeter along the host's y axis.</param>
            <param name="depthFront">The depth of the opening along the opening's +Z axis.</param>
            <param name="depthBack">The depth of the opening along the opening's -Z axis.</param>
        </member>
        <member name="T:Elements.Frame">
            <summary>
            An element defined by a perimeter and a cross section swept along that perimeter.
            </summary>
        </member>
        <member name="P:Elements.Frame.Profile">
            <summary>
            The frame's profile.
            </summary>
        </member>
        <member name="P:Elements.Frame.Curve">
            <summary>
            The perimeter of the frame.
            </summary>
        </member>
        <member name="M:Elements.Frame.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Create a frame.
            </summary>
            <param name="curve">The frame's perimeter.</param>
            <param name="profile">The frame's profile.</param>
            <param name="offset">The amount which the perimeter will be offset internally.</param>
            <param name="material">The frame's material.</param>
            <param name="transform">The frame's transform.</param>
            <param name="representation">The frame's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the frame.</param>
            <param name="name">The name of the frame.</param>
        </member>
        <member name="M:Elements.Frame.UpdateRepresentations">
            <summary>
            Update representations.
            </summary>
        </member>
        <member name="T:Elements.GeoJSON.Position">
            <summary>A position.</summary>
            <summary>
            A GeoJSON position specified by longitude and latitude.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Position.Latitude">
            <summary>The latitude in decimal degrees.</summary>
        </member>
        <member name="P:Elements.GeoJSON.Position.Longitude">
            <summary>The longitude in decimal degrees.</summary>
        </member>
        <member name="M:Elements.GeoJSON.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.GeoJSON.Position.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.Position.ToVectorMeters">
            <summary>
            Convert the position to a vector.
            </summary>
        </member>
        <member name="T:Elements.GeoJSON.Feature">
            <summary>
            A GeoJSON feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Type">
            <summary>
            The type of the feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Properties">
            <summary>
            All properties of the feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Geometry">
            <summary>
            The geometry of the feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Feature.BBox">
            <summary>
            The bounding box of the feature.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.Feature.#ctor(Elements.GeoJSON.Geometry,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Construct a feature.
            </summary>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Elements.GeoJSON.FeatureCollection">
            <summary>
            A GeoJSON feature collection.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.FeatureCollection.Type">
            <summary>
            The type of the feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.FeatureCollection.Features">
            <summary>
            A collection of features.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.FeatureCollection.#ctor(System.Collections.Generic.IEnumerable{Elements.GeoJSON.Feature})">
            <summary>
            Construct a feature collection.
            </summary>
            <param name="features">A collection of features.</param>
        </member>
        <member name="T:Elements.GeoJSON.Geometry">
            <summary>
            The base class for all GeoJSON geometry types.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Geometry.Type">
            <summary>
            The type of the geometry.
            </summary>
        </member>
        <member name="T:Elements.GeoJSON.Point">
            <summary>
            A GeoJSON point.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Point.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.Point.#ctor(Elements.GeoJSON.Position)">
            <summary>
            Construct a Point.
            </summary>
            <param name="coordinates"></param>
            <exception>Thrown when the provided coordinates are null.</exception>
        </member>
        <member name="T:Elements.GeoJSON.Line">
            <summary>
            A GeoJSON line.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Line.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.Line.#ctor(Elements.GeoJSON.Position[])">
             <summary>
             Construct a Line.
             </summary>
             <param name="coordinates"></param>
            <exception>Thrown when the coordinates provides does not contain 2 items.</exception>
        </member>
        <member name="T:Elements.GeoJSON.MultiPoint">
            <summary>
            A GeoJSON multipoint.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiPoint.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.MultiPoint.#ctor(Elements.GeoJSON.Position[])">
            <summary>
            Construct a MultiPoint.
            </summary>
            <param name="coordinates"></param>
            <exception>Thrown when the coordinates provided contains 1 item or less.</exception>
        </member>
        <member name="T:Elements.GeoJSON.LineString">
            <summary>
            A GeoJSON linestring.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.LineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.LineString.#ctor(Elements.GeoJSON.Position[])">
            <summary>
            Construct a LineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.MultiLineString">
            <summary>
            A GeoJSON multi line string.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiLineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.MultiLineString.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a MultiLineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.Polygon">
            <summary>
            A GeoJSON polygon.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Polygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.Polygon.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a Polygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:Elements.GeoJSON.Polygon.ToPolygons">
            <summary>
            Convert the coordinate array to a collection of polygons.
            The last position of the polygon is dropped.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.GeoJSON.MultiPolygon">
            <summary>
            A GeoJSON multi polygon.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiPolygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.MultiPolygon.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a MultiPolygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.GeometryCollection">
            <summary>
            A GeoJSON geometry collection.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.GeometryCollection.#ctor(Elements.GeoJSON.Geometry[])">
            <summary>
            Construct a geometry collection.
            </summary>
            <param name="geometries">An array of geometries.</param>
        </member>
        <member name="T:Elements.GeometricElement">
            <summary>An element with a geometric representation.</summary>
        </member>
        <member name="P:Elements.GeometricElement.Transform">
            <summary>The element's transform.</summary>
        </member>
        <member name="P:Elements.GeometricElement.Material">
            <summary>The element's material.</summary>
        </member>
        <member name="P:Elements.GeometricElement.Representation">
            <summary>The element's representation.</summary>
        </member>
        <member name="P:Elements.GeometricElement.IsElementDefinition">
            <summary>When true, this element will act as the base definition for element instances, and will not appear in visual output.</summary>
        </member>
        <member name="M:Elements.GeometricElement.UpdateRepresentations">
            <summary>
            This method provides an opportunity for geometric elements
            to adjust their solid operations before tesselation. As an example,
            a floor might want to clip its opening profiles out of 
            the profile of the floor.
            </summary>
        </member>
        <member name="M:Elements.GeometricElement.CreateInstance(Elements.Geometry.Transform,System.String)">
            <summary>
            Create an instance of this element.
            Instances will point to the same instance of an element.
            </summary>
            <param name="transform">The transform for this element instance.</param>
            <param name="name">The name of this element instance.</param>
        </member>
        <member name="T:Elements.Geometry.Arc">
            <summary>An arc defined by a CCW rotation around a center between a start angle and an end angle.</summary>
            <summary>
            An arc defined as a CCW rotation from the +X axis around a center between a start angle and an end angle.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ArcTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Geometry.Arc.Center">
            <summary>The center of the arc.</summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Radius">
            <summary>The radius of the arc.</summary>
        </member>
        <member name="P:Elements.Geometry.Arc.StartAngle">
            <summary>The angle from 0.0, in degrees, at which the arc will start with respect to the positive X axis.</summary>
        </member>
        <member name="P:Elements.Geometry.Arc.EndAngle">
            <summary>The angle from 0.0, in degrees, at which the arc will end with respect to the positive X axis.</summary>
        </member>
        <member name="M:Elements.Geometry.Arc.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct an arc.
            </summary>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The angle from 0.0, in degrees, at which the arc will start with respect to the positive X axis.</param>
            <param name="endAngle">The angle from 0.0, in degrees, at which the arc will end with respect to the positive X axis.</param>
        </member>
        <member name="M:Elements.Geometry.Arc.Length">
            <summary>
            Calculate the length of the arc.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Start">
            <summary>
            The start point of the arc.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.End">
            <summary>
            The end point of the arc.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.PointAt(System.Double)">
            <summary>
            Return the point at parameter u on the arc.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
            <returns>A Vector3 representing the point along the arc.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.TransformAt(System.Double)">
            <summary>
            Return transform on the arc at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0 on the arc.</param>
            <returns>A transform with its origin at u along the curve and its Z axis tangent to the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.Reversed">
            <summary>
            Get an arc which is the reverse of this Arc.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.Bounds">
            <summary>
            Get a bounding box for this arc.
            </summary>
            <returns>A bounding box for this arc.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.Plane">
            <summary>
            Compute the plane of the arc.
            </summary>
            <returns>The plane in which the arc lies.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.RenderVertices">
            <summary>
            A list of vertices describing the arc for rendering.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.Equals(Elements.Geometry.Arc)">
            <summary>
            Is this arc equal to the provided arc?
            </summary>
            <param name="other">The arc to test.</param>
            <returns>Returns true if the two arcs are equal, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.Complement">
            <summary>
            Return the arc which is the complement of this arc.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Arc.TransformedArc(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Arc.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="T:Elements.Geometry.BBox3">
            <summary>An axis-aligned bounding box.</summary>
            <summary>
            An axis-aligned bounding box.
            </summary>
        </member>
        <member name="P:Elements.Geometry.BBox3.Min">
            <summary>The minimum extent of the bounding box.</summary>
        </member>
        <member name="P:Elements.Geometry.BBox3.Max">
            <summary>The maximum extent of the bounding box.</summary>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Construct a bounding box from an array of points.
            </summary>
            <param name="points">The points which are contained within the bounding box.</param>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(Elements.Geometry.Profile)">
            <summary>
            Create the BBox3 for a Profile.
            </summary>
            <param name="profile">The Profile.</param>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Create a bounding box for a collection of polygons.
            </summary>
            <param name="polygons"></param>
        </member>
        <member name="M:Elements.Geometry.BBox3.Translated(Elements.Geometry.Vector3)">
            <summary>
            Get a translated copy of the bounding box.
            </summary>
            <param name="translation">The translation to apply.</param>
        </member>
        <member name="M:Elements.Geometry.BBox3.Center">
            <summary>
            Get the center of the bounding box.
            </summary>
            <returns>The center of the bounding box.</returns>
        </member>
        <member name="M:Elements.Geometry.BBox3.Equals(System.Object)">
            <summary>
            Is the provided object a bounding box? If so, is it
            equal to this bounding box within Epsilon?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.BBox3.GetHashCode">
            <summary>
            Get the hash code for the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.BBox3.ToString">
            <summary>
            The string representation of the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.BBox3.op_Equality(Elements.Geometry.BBox3,Elements.Geometry.BBox3)">
            <summary>
            Are the two bounding boxes equal within Epsilon?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.BBox3.op_Inequality(Elements.Geometry.BBox3,Elements.Geometry.BBox3)">
            <summary>
            Are the two bounding boxes not equal within Epsilon?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:Elements.Geometry.Color">
            <summary>A color with red, green, blue, and alpha components.</summary>
            <summary>
            An RGBA color.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Color.Red">
            <summary>The red component of the color between 0.0 and 1.0.</summary>
        </member>
        <member name="P:Elements.Geometry.Color.Green">
            <summary>The green component of the color between 0.0 and 1.0.</summary>
        </member>
        <member name="P:Elements.Geometry.Color.Blue">
            <summary>The blue component of the color between 0.0 and 1.0.</summary>
        </member>
        <member name="P:Elements.Geometry.Color.Alpha">
            <summary>The alpha component of the color between 0.0 and 1.0.</summary>
        </member>
        <member name="M:Elements.Geometry.Color.ToArray">
            <summary>
            Get the color's components as an array.
            </summary>
            <returns>An array containing the color's components.</returns>
        </member>
        <member name="M:Elements.Geometry.Color.Equals(System.Object)">
            <summary>
            Is this color equal to the provided color?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Color.GetHashCode">
            <summary>
            Get the hash code for this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Color.Equals(Elements.Geometry.Color)">
            <summary>
            Is this color equal to the provided color?
            </summary>
            <param name="other">The color to test.</param>
            <returns>Returns true if the two colors are equal, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Color.ToString">
            <summary>
            Converts this color to a string.
            </summary>
            <returns>Returns a string representation of the form "R: r, G: g, B: b, A: a".</returns>
        </member>
        <member name="M:Elements.Geometry.Color.Lerp(Elements.Geometry.Color,System.Double)">
            <summary>
            Linearly interpolate between this color and the other color.
            </summary>
            <param name="other">The other color.</param>
            <param name="t">A value between 0.0 and 1.0.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Color.op_Multiply(Elements.Geometry.Color,Elements.Geometry.Color)">
            <summary>
            Multiply two colors.
            Resulting values will be clamped in the range of 0.0 to 1.0.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
        </member>
        <member name="M:Elements.Geometry.Color.op_Multiply(System.Double,Elements.Geometry.Color)">
            <summary>
            Multiply a color and a scalar.
            Resulting values will be clamped in the range of 0.0 to 1.0.
            </summary>
            <param name="a">The color.</param>
            <param name="t">The scalar.</param>
        </member>
        <member name="M:Elements.Geometry.Color.op_Addition(Elements.Geometry.Color,Elements.Geometry.Color)">
            <summary>
            Add two colors.
            Resulting values will be clamped in the range of 0.0 to 1.0.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
        </member>
        <member name="M:Elements.Geometry.Color.op_Equality(Elements.Geometry.Color,Elements.Geometry.Color)">
            <summary>
            Are the two Colors equal?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.Color.op_Inequality(Elements.Geometry.Color,Elements.Geometry.Color)">
            <summary>
            Are the two Colors equal?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:Elements.Geometry.Curve">
            <summary>The abstract base class for all curves.</summary>
        </member>
        <member name="F:Elements.Geometry.Curve.MinimumChordLength">
            <summary>
            The minimum chord length allowed for subdivision of the curve.
            A lower MinimumChordLength results in smoother curves.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Curve.Bounds">
            <summary>
            Get the bounding box for this curve.
            </summary>
            <returns>A bounding box for this curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Curve.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of transforms which represent frames along this curve.
            </summary>
            <param name="startSetback">The offset parameter from the start of the curve.</param>
            <param name="endSetback">The offset parameter from the end of the curve.</param>
            <returns>A collection of transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Curve.Length">
            <summary>
            Calculate the length of the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Curve.PointAt(System.Double)">
            <summary>
            Get a point along the curve at parameter u.
            </summary>
            <param name="u"></param>
            <returns>A point on the curve at parameter u.</returns>
        </member>
        <member name="M:Elements.Geometry.Curve.TransformAt(System.Double)">
            <summary>
            Get a transform whose XY plane is perpendicular to the curve, and whose
            positive Z axis points along the curve.
            </summary>
            <param name="u">The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform.</param>
            <returns>A transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Curve.ToPolyline(System.Int32)">
            <summary>
            Create a polyline through a set of points along the curve.
            </summary>
            <param name="divisions">The number of divisions of the curve.</param>
            <returns>A polyline.</returns>
        </member>
        <member name="M:Elements.Geometry.Curve.RenderVertices">
            <summary>
            A list of vertices used to render the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Curve.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Curve.op_Implicit(Elements.Geometry.Curve)~Elements.ModelCurve">
            <summary>
            Implicitly convert a curve to a ModelCurve Element.
            </summary>
            <param name="c">The curve to convert.</param>
        </member>
        <member name="T:Elements.Geometry.Line">
            <summary>A line between two points. The line is parameterized from 0.0(start) to 1.0(end)</summary>
            <summary>
            A linear curve between two points.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/LineTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Geometry.Line.Start">
            <summary>The start of the line.</summary>
        </member>
        <member name="P:Elements.Geometry.Line.End">
            <summary>The end of the line.</summary>
        </member>
        <member name="M:Elements.Geometry.Line.Length">
            <summary>
            Calculate the length of the line.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.#ctor">
            <summary>
            Create a line of one unit length along the X axis.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)">
            <summary>
            Construct a line of length from a start along direction.
            </summary>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="length"></param>
        </member>
        <member name="M:Elements.Geometry.Line.TransformAt(System.Double)">
            <summary>
            Get a transform whose XY plane is perpendicular to the curve, and whose
            positive Z axis points along the curve.
            </summary>
            <param name="u">The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform.</param>
            <returns>A transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.PointAt(System.Double)">
            <summary>
            Get a point along the line at parameter u.
            </summary>
            <param name="u"></param>
            <returns>A point on the curve at parameter u.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Line.TransformedLine(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Line.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Line.Reversed">
            <summary>
            Get a new line that is the reverse of the original line.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.Thicken(System.Double)">
            <summary>
            Thicken a line by the specified amount.
            </summary>
            <param name="amount">The amount to thicken the line.</param>
        </member>
        <member name="M:Elements.Geometry.Line.Equals(Elements.Geometry.Line)">
            <summary>
            Is this line equal to the provided line?
            </summary>
            <param name="other">The target line.</param>
            <returns>True if the start and end points of the lines are equal, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.GetHashCode">
            <summary>
            Get the hash code for the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.Intersects(Elements.Geometry.Plane,Elements.Geometry.Vector3@,System.Boolean)">
            <summary>
            Intersect this line with the specified plane
            </summary>
            <param name="p">The plane.</param>
            <param name="result">The location of intersection.</param>
            <param name="infinite">If true, line will be treated as infinite. (False by default)</param>
            <returns>True if the line intersects the plane, false if no intersection occurs.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Intersects2D(Elements.Geometry.Line)">
            <summary>
            Does this line intersect the provided line in 2D?
            </summary>
            <param name="l"></param>
            <returns>Return true if the lines intersect,
            false if the lines have coincident vertices or do not intersect.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Intersects(Elements.Geometry.Line,Elements.Geometry.Vector3@,System.Boolean,System.Boolean)">
            <summary>
            Does this line intersect the provided line in 3D?
            </summary>
            <param name="l"></param>
            <param name="result"></param>
            <param name="infinite">Treat the lines as infinite?</param>
            <param name="includeEnds">If the end of one line lies exactly on the other, count it as an intersection?</param>
            <returns>True if the lines intersect, false if they are fully collinear or do not intersect.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Bounds">
            <summary>
            Get the bounding box for this line.
            </summary>
            <returns>A bounding box for this line.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Direction">
            <summary>
            A normalized vector representing the direction of the line.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.PointOnLine(Elements.Geometry.Vector3,System.Boolean)">
            <summary>
            Test if a point lies within this line segment
            </summary>
            <param name="point">The point to test.</param>
            <param name="includeEnds">Consider a point at the endpoint as on the line.</param>
        </member>
        <member name="M:Elements.Geometry.Line.DivideByLength(System.Double,System.Boolean)">
            <summary>
            Divide the line into as many segments of the provided length as possible.
            </summary>
            <param name="l">The length.</param>
            <param name="removeShortSegments">A flag indicating whether segments shorter than l should be removed.</param>
        </member>
        <member name="M:Elements.Geometry.Line.DivideByLengthFromCenter(System.Double)">
            <summary>
            Divide the line into as many segments of the provided length as possible.
            Divisions will be centered along the line.
            </summary>
            <param name="l">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.DivideIntoEqualSegments(System.Int32)">
            <summary>
            Divide the line into n equal segments.
            </summary>
            <param name="n">The number of segments.</param>
        </member>
        <member name="M:Elements.Geometry.Line.Offset(System.Double,System.Boolean)">
            <summary>
            Offset the line. The offset direction will be defined by
            Direction X Vector3.ZAxis.
            </summary>
            <param name="distance">The distance to offset.</param>
            <param name="flip">Flip the offset direction.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.TrimTo(Elements.Geometry.Line,System.Boolean)">
            <summary>
            Trim this line to the trimming curve.
            </summary>
            <param name="line">The curve to which to trim.</param>
            <param name="flip">Should the trim direction be reversed?</param>
            <returns>A new line, or null if this line does not intersect the trimming line.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.ExtendTo(Elements.Geometry.Line)">
            <summary>
            Extend this line to the trimming curve.
            </summary>
            <param name="line">The curve to which to extend.</param>
            <returns>A new line, or null if these lines would never intersect if extended infinitely.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.ExtendTo(System.Collections.Generic.IEnumerable{Elements.Geometry.Line},System.Boolean,System.Boolean)">
            <summary>
            Extend this line to its (nearest, by default) intersection with any other line.
            If optional `extendToFurthest` is true, extends to furthest intersection with any other line.
            </summary>
            <param name="otherLines">The other lines to intersect with</param>
            <param name="bothSides">Optional — if false, will only extend in the line's direction; if true will extend in both directions.</param>
            <param name="extendToFurthest">Optional — if true, will extend line as far as it will go, rather than stopping at the closest intersection.</param>
        </member>
        <member name="M:Elements.Geometry.Line.ExtendTo(Elements.Geometry.Polyline,System.Boolean,System.Boolean)">
            <summary>
            Extend this line to its (nearest, by default) intersection with a polyline.
            </summary>
            <param name="polyline">The polyline to intersect with</param>
            <param name="bothSides">Optional — if false, will only extend in the line's direction; if true will extend in both directions.</param>
            <param name="extendToFurthest">Optional — if true, will extend line as far as it will go, rather than stopping at the closest intersection.</param>
        </member>
        <member name="M:Elements.Geometry.Line.ExtendTo(Elements.Geometry.Profile,System.Boolean,System.Boolean)">
            <summary>
            Extend this line to its (nearest, by default) intersection with a profile.
            </summary>
            <param name="profile">The profile to intersect with</param>
            <param name="bothSides">Optional — if false, will only extend in the line's direction; if true will extend in both directions.</param>
            <param name="extendToFurthest">Optional — if true, will extend line as far as it will go, rather than stopping at the closest intersection.</param>
        </member>
        <member name="M:Elements.Geometry.Line.ExtendTo(Elements.Geometry.Polygon,System.Boolean,System.Boolean)">
            <summary>
            Extend this line to its (nearest, by default) intersection with a polygon.
            </summary>
            <param name="polygon">The polygon to intersect with</param>
            <param name="bothSides">Optional — if false, will only extend in the line's direction; if true will extend in both directions.</param>
            <param name="extendToFurthest">Optional — if true, will extend line as far as it will go, rather than stopping at the closest intersection.</param>
        </member>
        <member name="M:Elements.Geometry.Line.Trim(Elements.Geometry.Polygon,System.Collections.Generic.List{Elements.Geometry.Line}@)">
            <summary>
            Trim a line with a polygon.
            </summary>
            <param name="polygon">The polygon to trim with.</param>
            <param name="outsideSegments">A list of the segment(s) of the line outside of the supplied polygon.</param>
            <returns>A list of the segment(s) of the line within the supplied polygon.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Fillet(Elements.Geometry.Line,System.Double)">
            <summary>
            Create a fillet arc between this line and the target.
            </summary>
            <param name="target">The line with which to fillet.</param>
            <param name="radius">The radius of the fillet.</param>
            <returns>An arc, or null if no fillet can be calculated.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.RenderVertices">
            <summary>
            A list of vertices describing the arc for rendering.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Matrix">
            <summary>A column-ordered 4x3 matrix.</summary>
            <summary>
            A column-ordered 3x4 matrix.
            The first 3 columns represent the X, Y, and Z axes of the coordinate system.
            The fourth column represents the translation of the coordinate system.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.Components">
            <summary>The components of the matrix.</summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m11">
            <summary>
            m11
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m21">
            <summary>
            m21
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m31">
            <summary>
            m31
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m12">
            <summary>
            m12
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m22">
            <summary>
            m22
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m32">
            <summary>
            m32
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m13">
            <summary>
            m13
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m23">
            <summary>
            m23
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.m33">
            <summary>
            m33
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.tx">
            <summary>
            tx
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.ty">
            <summary>
            ty
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.tz">
            <summary>
            tz
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.XAxis">
            <summary>
            The X axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.YAxis">
            <summary>
            The Y axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.ZAxis">
            <summary>
            The Z axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.Translation">
            <summary>
            The translation component of the Matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.#ctor">
            <summary>
            Construct a 4X3 matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a matrix from axes.
            </summary>
            <param name="xAxis">The X axis.</param>
            <param name="yAxis">The Y axis.</param>
            <param name="zAxis">The Z axis.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetIdentity">
            <summary>
            Set the matrix to identity.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.ZeroTranslation">
            <summary>
            Set the translation of the matrix to zero.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetTranslation(Elements.Geometry.Vector3)">
            <summary>
            Set the translation of the matrix.
            </summary>
            <param name="v">The translation vector.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupTranslation(Elements.Geometry.Vector3)">
            <summary>
            Setup the matrix to translate.
            </summary>
            <param name="v">The translation.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupRotate(System.Int32,System.Double)">
            <summary>
            Setup the matrix to rotate.
            </summary>
            <param name="axis">The axis of rotation. 1-x, 2-y, 3-z</param>
            <param name="theta">The angle of rotation in radians.</param>
            <exception>Thrown when the provided axis is not 1-3.</exception>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupRotate(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Setup the matrix to perform rotation.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="theta">The angle of rotation in radians.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupScale(Elements.Geometry.Vector3)">
            <summary>
            Setup the matrix to scale.
            </summary>
            <param name="s">The scale value.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupProject(Elements.Geometry.Plane)">
            <summary>
            Setup the matrix to project.
            </summary>
            <param name="p">The plane on which to project.</param>
            <exception>Thrown when provided Plane's normal is not unit length.</exception>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupReflect(Elements.Geometry.Vector3)">
            <summary>
            Setup the matrix to reflect about a plane with normal n.
            </summary>
            <param name="n">The normal of the reflection plane.</param>
            <exception>Thrown when provided Plane's normal is not unit length.</exception>
        </member>
        <member name="M:Elements.Geometry.Matrix.op_Multiply(Elements.Geometry.Vector3,Elements.Geometry.Matrix)">
            <summary>
            Transform the specified vector.
            </summary>
            <param name="p">The vector to transform.</param>
            <param name="m">The transformation matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Matrix.op_Multiply(Elements.Geometry.Matrix,Elements.Geometry.Matrix)">
            <summary>
            Multiply two matrices.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Matrix.Transpose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.Determinant">
            <summary>
            Compute the determinant of the 3x3 portion of the matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.Inverse">
            <summary>
            Compute the inverse of the matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.ToString">
            <summary>
            Return the string representation of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Matrix.Equals(Elements.Geometry.Matrix)">
            <summary>
            Is this matrix equal to other?
            </summary>
            <param name="other">The transform to test.</param>
            <returns>True if the two transforms are equal, otherwise false.</returns>
        </member>
        <member name="T:Elements.Geometry.Mesh">
            <summary>A triangulated mesh.</summary>
        </member>
        <member name="P:Elements.Geometry.Mesh.Vertices">
            <summary>The mesh' vertices.</summary>
        </member>
        <member name="P:Elements.Geometry.Mesh.Triangles">
            <summary>The mesh' triangles.</summary>
        </member>
        <member name="M:Elements.Geometry.Mesh.#ctor">
            <summary>
            Construct an empty mesh.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Mesh.FromSTL(System.String,Elements.Units.LengthUnit)">
            <summary>
            Construct a mesh from an STL file.
            </summary>
            <param name="stlPath">The path to the STL file.</param>
            <param name="unit">The length unit used in the file.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Mesh.ToString">
            <summary>
            Get a string representation of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Mesh.ComputeNormals">
            <summary>
            Compute the vertex normals by averaging
            the normals of the incident faces.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Mesh.GetBuffers(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Single[]@,System.Single[]@,System.UInt16@,System.UInt16@,System.Double[]@,System.Double[]@)">
            <summary>
            Get all buffers required for rendering.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddTriangle(Elements.Geometry.Vertex,Elements.Geometry.Vertex,Elements.Geometry.Vertex)">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="a">The first vertex.</param>
            <param name="b">The second vertex.</param>
            <param name="c">The third vertex.</param>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddTriangle(Elements.Geometry.Triangle)">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="t">The triangle to add.</param>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddVertex(Elements.Geometry.Vector3,Elements.Geometry.UV,Elements.Geometry.Vector3,Elements.Geometry.Color)">
            <summary>
            Add a vertex to the mesh.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The vertex's normal.</param>
            <param name="color">The vertex's color.</param>
            <param name="uv">The texture coordinate of the vertex.</param>
            <returns>The newly created vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddVertex(Elements.Geometry.Vertex)">
            <summary>
            Add a vertex to the mesh.
            </summary>
            <param name="v">The vertex to add.</param>
        </member>
        <member name="T:Elements.Geometry.Plane">
            <summary>A plane.</summary>
            <summary>
            A cartesian plane.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Plane.Origin">
            <summary>The origin of the plane.</summary>
        </member>
        <member name="P:Elements.Geometry.Plane.Normal">
            <summary>The normal of the plane.</summary>
        </member>
        <member name="M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a plane by three points.
            The plane is constructed as a->b * b->c.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <exception>Thrown when any of a, b, or c are null.</exception>
        </member>
        <member name="M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Construct a plane.
            Only the first three points of the points array will be used.
            </summary>
            <param name="origin">The origin of the plane.</param>
            <param name="points">An array of vectors to be used to determine the normal of the plane.</param>
            <exception>Thrown when less than three points are provided.</exception>
            <exception>Thrown when coincident points are provided.</exception>
        </member>
        <member name="M:Elements.Geometry.Plane.ClosestPoint(Elements.Geometry.Vector3)">
            <summary>
            Find the closest point on this plane from a given sample point.
            </summary>
            <param name="point">The sample point.</param>
            <returns>The closest point to the sample point on this plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Plane.SignedDistanceTo(Elements.Geometry.Vector3)">
            <summary>
            Find the signed distance from a sample point to a plane.
            If positive, the point is on the "Normal" side of the plane,
            otherwise it is on the opposite side. 
            </summary>
            <param name="point">The sample point.</param>
            <returns>The signed distance between this plane and the sample point.</returns>
        </member>
        <member name="M:Elements.Geometry.Plane.Equals(Elements.Geometry.Plane)">
            <summary>
            Is this plane equal to the provided plane?
            </summary>
            <param name="other">The plane to test.</param>
            <returns>Returns true if the two planes are equal, otherwise false.</returns>
        </member>
        <member name="T:Elements.Geometry.Polygon">
            <summary>A closed planar polygon.</summary>
            <summary>
            A closed planar polygon.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/PolygonTests.cs?name=example)]
            </example>
            <summary>
            Methods to construct various polygons.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polygon.op_Implicit(Elements.Geometry.Polygon)~Elements.Geometry.Profile">
            <summary>
            Implicitly convert a polygon to a profile.
            </summary>
            <param name="p">The polygon to convert.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.op_Implicit(Elements.Geometry.Polygon)~Elements.Element">
            <summary>
            Implicitly convert a Polygon to a ModelCurve Element.
            </summary>
            <param name="c">The curve to convert.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.TransformedPolygon(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Polygon.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is within this Polygon without coincidence with an edge when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is within this Polygon when compared on a shared plane. Returns false if the Vector3 is outside this Polygon or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3,Elements.Geometry.Containment@)">
            <summary>
            Tests if the supplied Vector3 is within this Polygon, using a 2D method.
            </summary>
            <param name="vector">The position to test.</param>
            <param name="containment">Whether the point is inside, outside, at an edge, or at a vertex.</param>
            <returns>Returns true if the supplied Vector3 is within this polygon.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within this Polygon without coincident edges when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon is within this Polygon when compared on a shared plane. Returns false if the supplied Polygon is not entirely within this Polygon, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.IsClockWise">
            <summary>
            Calculates whether this polygon is configured clockwise.
            </summary>
            <returns>True if this polygon is oriented clockwise.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if the supplied Vector3 is outside this Polygon, or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within this Polygon with or without edge coincident vertices when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if any vertex of the supplied Polygon is outside this Polygon, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is outside this Polygon when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is outside this Polygon when compared on a shared plane or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon and this Polygon are coincident in any way when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Polygon do not intersect or touch this Polygon when compared on a shared plane or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare with this Polygon.</param>
            <returns>
            Returns true if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Returns false if the supplied Polygon does not share an area with this Polygon or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Tests if the supplied Vector3 is coincident with an edge of this Polygon when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns true if the supplied Vector3 coincides with an edge of this Polygon when compared on a shared plane. Returns false if the supplied Vector3 is not coincident with an edge of this Polygon, or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Tests if at least one point of an edge of the supplied Polygon is shared with an edge of this Polygon without the Polygons interesecting when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns true if the supplied Polygon shares at least one edge point with this Polygon without the Polygons intersecting when compared on a shared plane. Returns false if the Polygons intersect, are disjoint, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the geometric difference between two sets of polygons.
            </summary>
            <param name="firstSet">First set of polygons</param>
            <param name="secondSet">Second set of polygons</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>Returns a list of Polygons representing the subtraction of the second set of polygons from the first set.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the geometric union of two sets of polygons.
            </summary>
            <param name="firstSet">First set of polygons</param>
            <param name="secondSet">Second set of polygons</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>Returns a list of Polygons representing the union of both sets of polygons.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.UnionAll(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the geometric union of a set of polygons.
            </summary>
            <param name="polygons">The polygons to union</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>Returns a list of Polygons representing the union of all polygons.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.XOR(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Returns Polygons representing the symmetric difference between two sets of polygons.
            </summary>
            <param name="firstSet">First set of polygons</param>
            <param name="secondSet">Second set of polygons</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a list of Polygons representing the symmetric difference of these two sets of polygons.
            Returns a representation of all polygons if they do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Intersection(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the Polygon intersections between two sets of polygons.
            </summary>
            <param name="firstSet">First set of polygons</param>
            <param name="secondSet">Second set of polygons</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a list of Polygons representing the intersection of the first set of Polygons with the second set.
            Returns null if the Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.BooleanTwoSets(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Geometry.BooleanMode,Elements.Geometry.VoidTreatment,System.Double)">
            <summary>
            Apply a boolean operation (Union, Difference, Intersection, or XOr) to two lists of Polygons.
            </summary>
            <param name="subjectPolygons">Polygons to clip</param>
            <param name="clippingPolygons">Polygons with which to clip</param>
            <param name="booleanMode">The operation to apply: Union, Difference, Intersection, or XOr</param>
            <param name="voidTreatment">Optional setting for how to process the polygons in each set: either treat polygons inside others as voids, or treat them all as solid (thereby ignoring internal polygons).</param>
            <param name="tolerance">Optional override of the tolerance for determining if two polygons are identical.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Constructs the geometric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <param name="tolerance">An optional tolerance value.</param>
            <returns>
            Returns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon.
            Returns null if the area of this Polygon is entirely subtracted.
            Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the geometric difference between this Polygon and the supplied Polygons.
            </summary>
            <param name="difPolys">The list of intersecting Polygons.</param>
            <param name="tolerance">An optional tolerance value.</param>
            <returns>
            Returns a list of Polygons representing the subtraction of the supplied Polygons from this Polygon.
            Returns null if the area of this Polygon is entirely subtracted.
            Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Constructs the Polygon intersections between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a list of Polygons representing the intersection of this Polygon with the supplied Polygon.
            Returns null if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Constructs the geometric union between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The Polygon to be combined with this Polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a single Polygon from a successful union.
            Returns null if a union cannot be performed on the two Polygons.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double)">
            <summary>
            Constructs the geometric union between this Polygon and the supplied list of Polygons.
            </summary>
            <param name="polygons">The list of Polygons to be combined with this Polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a single Polygon from a successful union.
            Returns null if a union cannot be performed on the complete list of Polygons.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Returns Polygons representing the symmetric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>
            Returns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon.
            Returns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Offset(System.Double,Elements.Geometry.EndType,System.Double)">
             <summary>
             Offset this polygon by the specified amount.
             </summary>
             <param name="offset">The amount to offset.</param>
             <param name="endType">The type of closure used for the offset polygon.</param>
             <param name="tolerance">An optional tolerance.</param>
             <returns>A new Polygon offset by offset.</returns>
            
        </member>
        <member name="M:Elements.Geometry.Polygon.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Reversed">
            <summary>
            Reverse the direction of a polygon.
            </summary>
            <returns>Returns a new Polygon whose vertices are reversed.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Equals(System.Object)">
            <summary>
            Is this polygon equal to the provided polygon?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.Geometry.Polygon.IsAlmostEqualTo(Elements.Geometry.Polygon,System.Double,System.Boolean)">
            <summary>
            Test if this polygon has the same vertex count and shape as another, within tolerance.
            </summary>
            <param name="other">The other polygon.</param>
            <param name="tolerance">The optional tolerance value to use. If not supplied, the global tolerance will be used.</param>
            <param name="ignoreWinding">If true, polygons with opposite winding will be considered as equal.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.FromAlignedBoundingBox2d(System.Collections.Generic.IEnumerable{Elements.Geometry.Vector3})">
            <summary>
            Find the minimum-area rotated rectangle containing a set of points, 
            calculated without regard for Z coordinate. 
            </summary>
            <param name="points">The points to contain within the rectangle</param>
            <returns>A rectangular polygon that contains all input points</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.GetHashCode">
            <summary>
            Get the hash code for the polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)">
            <summary>
            Project the specified vector onto the plane.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)">
            <summary>
            Project this Polygon onto a Plane along a vector.
            </summary>
            <param name="direction">The projection vector.</param>
            <param name="p">The Plane onto which to project the Polygon.</param>
            <returns>A Polygon projected onto the Plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Frames(System.Double,System.Double)">
            <summary>
            Get the transforms used to transform a Profile extruded along this Polyline.
            </summary>
            <param name="startSetback"></param>
            <param name="endSetback"></param>
        </member>
        <member name="M:Elements.Geometry.Polygon.ToString">
            <summary>
            The string representation of the Polygon.
            </summary>
            <returns>A string containing the string representations of this Polygon's vertices.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Length">
            <summary>
            Calculate the length of the polygon.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polygon.Centroid">
            <summary>
            Calculate the centroid of the polygon.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polygon.Area">
            <summary>
            Calculate the polygon's area.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polygon.Transform(Elements.Geometry.Transform)">
            <summary>
            Transform this polygon in place.
            </summary>
            <param name="t">The transform.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.TransformSegment(Elements.Geometry.Transform,System.Int32)">
            <summary>
            Transform a specified segment of this polygon in place.
            </summary>
            <param name="t">The transform. If it is not within the polygon plane, then an exception will be thrown.</param>
            <param name="i">The segment to transform. If it does not exist, then no work will be done.</param>
        </member>
        <member name="M:Elements.Geometry.Polygon.Fillet(System.Double)">
            <summary>
            Fillet all corners on this polygon.
            </summary>
            <param name="radius">The fillet radius.</param>
            <returns>A contour containing trimmed edge segments and fillets.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.PointAtInternal(System.Double,System.Int32@)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <param name="segmentIndex">The index of the segment containing parameter u.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Normal">
            <summary>
            The normal of this polygon, according to Newell's Method.
            </summary>
            <returns>The unitized sum of the cross products of each pair of edges.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.NormalsAtVertices">
            <summary>
            Get the normal of each vertex on the polygon.
            </summary>
            <remarks>All normals will be the same since polygons are coplanar by definition.</remarks>
            <returns>A collection of unit vectors, each corresponding to a single vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.RenderVertices">
            <summary>
            A list of vertices describing the arc for rendering.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polygon.Rectangle(System.Double,System.Double)">
            <summary>
            Create a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A rectangular Polygon centered around origin.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a rectangle.
            </summary>
            <param name="min">The minimum coordinate.</param>
            <param name="max">The maximum coordinate.</param>
            <returns>A rectangular Polygon with its lower left corner at min and its upper right corner at max.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Circle(System.Double,System.Int32)">
            <summary>
            Create a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="divisions">The number of divisions of the circle.</param>
            <returns>A circle as a Polygon tessellated into the specified number of divisions.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Ngon(System.Int32,System.Double)">
            <summary>
            Create an ngon.
            </summary>
            <param name="sides">The number of side of the Polygon.</param>
            <param name="radius">The radius of the circle in which the Ngon is inscribed.</param>
            <returns>A Polygon with the specified number of sides.</returns>
            <exception>Thrown when the radius is less than or equal to zero.</exception>
            <exception>Thrown when the number of sides is less than 3.</exception>
        </member>
        <member name="M:Elements.Geometry.Polygon.L(System.Double,System.Double,System.Double)">
            <summary>
            Create an L.
            </summary>
            <param name="width">The width of the L.</param>
            <param name="length">The length of the L.</param>
            <param name="thickness">The thickness of the L.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Star(System.Double,System.Double,System.Int32)">
            <summary>
            Create a star.
            </summary>
            <param name="outerRadius">The outer radius.</param>
            <param name="innerRadius">The inner radius.</param>
            <param name="points">The number of points.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Polyline">
            <summary>A continuous set of lines.</summary>
            <summary>
            A continuous set of lines.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/PolylineTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Geometry.Polyline.Vertices">
            <summary>The vertices of the polygon.</summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.Length">
            <summary>
            Calculate the length of the polygon.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.Start">
            <summary>
            The start of the polyline.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.End">
            <summary>
            The end of the polyline.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.Reversed">
            <summary>
            Reverse the direction of a polyline.
            </summary>
            <returns>Returns a new polyline with opposite winding.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.ToString">
            <summary>
            Get a string representation of this polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.TransformAt(System.Double)">
            <summary>
            Get the Transform at the specified parameter along the Polygon.
            </summary>
            <param name="u">The parameter on the Polygon between 0.0 and 1.0.</param>
            <returns>A Transform with its Z axis aligned trangent to the Polygon.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.TransformedPolyline(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Polyline.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Polyline.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Polyline.TransformSegment(Elements.Geometry.Transform,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Transform a specified segment of this polyline in place.
            </summary>
            <param name="t">The transform. If it is not within the polygon plane, then an exception will be thrown.</param>
            <param name="i">The segment to transform. If it does not exist, then no work will be done.</param>
            <param name="isClosed">If set to true, the segment between the start end end point will be considered a valid target.</param>
            <param name="isPlanar">If set to true, an exception will be thrown if the resultant shape is no longer planar.</param>
        </member>
        <member name="M:Elements.Geometry.Polyline.NormalsAtVertices">
            <summary>
            Get the normal of each vertex on the polyline.
            </summary>
            <returns>A collection of unit vectors, each corresponding to a single vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Frames(System.Double,System.Double)">
            <summary>
            Get the transforms used to transform a Profile extruded along this Polyline.
            </summary>
            <param name="startSetback"></param>
            <param name="endSetback"></param>
        </member>
        <member name="M:Elements.Geometry.Polyline.Bounds">
            <summary>
            Get the bounding box for this curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.Plane">
            <summary>
            Compute the Plane defined by the first three non-collinear vertices of the Polygon.
            </summary>
            <returns>A Plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.RenderVertices">
            <summary>
            A list of vertices describing the arc for rendering.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.CheckCoincidenceAndThrow(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Check for coincident vertices in the supplied vertex collection.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Elements.Geometry.Polyline.CheckSegmentLengthAndThrow(System.Collections.Generic.IList{Elements.Geometry.Line})">
            <summary>
            Check if any of the polygon segments have zero length.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.CheckSelfIntersectionAndThrow(Elements.Geometry.Transform,System.Collections.Generic.IList{Elements.Geometry.Line})">
            <summary>
            Check for self-intersection in the supplied line segment collection.
            </summary>
            <param name="t">The transform representing the plane of the polygon.</param>
            <param name="segments"></param>
        </member>
        <member name="M:Elements.Geometry.Polyline.CreateMiterTransform(System.Int32,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Generates a transform that expresses the plane of a miter join at a point on the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.PointAtInternal(System.Double,System.Int32@)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <param name="segmentIndex">The index of the segment containing parameter u.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Offset(System.Double,Elements.Geometry.EndType,System.Double)">
            <summary>
            Offset this polyline by the specified amount.
            </summary>
            <param name="offset">The amount to offset.</param>
            <param name="endType">The closure type to use on the offset polygon.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>A new closed Polygon offset in all directions by offset from the polyline.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Equals(Elements.Geometry.Polyline)">
            <summary>
            Does this polyline equal the provided polyline?
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.SharedSegments(Elements.Geometry.Polyline,Elements.Geometry.Polyline,System.Boolean)">
            <summary>
            Identify any shared segments between two polylines.
            </summary>
            <param name="a">The first polyline to compare.</param>
            <param name="b">The second polyline to compare.</param>
            <param name="isClosed">Flag as closed to include segment between first and last vertex.</param>
            <returns>Returns a list of tuples of indices for the segments that match in each polyline.</returns>
        </member>
        <member name="T:Elements.Geometry.Profile">
            <summary>A profile comprised of an external boundary and one or several holes.</summary>
            <summary>
            A polygonal perimeter with zero or more polygonal voids.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Perimeter">
            <summary>The perimeter of the profile.</summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Voids">
            <summary>A collection of Polygons representing voids in the profile.</summary>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon)">
            <summary>
            Construct a profile.
            </summary>
            <param name="perimeter">The perimeter of the profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Construct a profile from a collection of polygons.
            If the collection contains more than one polygon, the first polygon
            will be used as the perimeter and any remaining polygons will 
            be used as voids.
            </summary>
            <param name="polygons">The polygons bounding this profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon)">
            <summary>
            Construct a profile.
            </summary>
            <param name="perimeter">The perimeter of the profile.</param>
            <param name="void">A void in the profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.Reversed">
            <summary>
            Get a new profile which is the reverse of this profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Area">
            <summary>
            The area of the profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Transform(Elements.Geometry.Transform)">
            <summary>
            Transform this profile in place.
            </summary>
            <param name="t">The transform.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.Scale(System.Double)">
            <summary>
            Return a new profile that is this profile scaled about the origin by the desired amount.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Union(Elements.Geometry.Profile,System.Double)">
            <summary>
            Perform a union operation, returning a new profile that is the union of the current profile with the other profile
            <param name="profile">The profile with which to create a union.</param>
            <param name="tolerance">An optional tolerance.</param>
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(System.String)">
            <summary>
            Default constructor for profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Clip(System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Double)">
            <summary>
             Conduct a clip operation on this profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.OrientVoids">
            <summary>
            Ensure that voids run in an opposite winding direction to the perimeter of the profile.
            Be sure to call this if you modify the Profile's Voids array directly.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Equals(Elements.Geometry.Profile)">
            <summary>
            Is this profile equal to the provided profile?
            </summary>
            <param name="other">The other profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.Contains(Elements.Geometry.Vector3)">
            <summary>
            Tests if a point is contained within this profile. Returns false for points that are outside of the profile, within voids, or coincident at edges or vertices.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Profile.Contains(Elements.Geometry.Vector3,Elements.Geometry.Containment@)">
            <summary>
            Tests if a point is contained within this profile. Returns false for points that are outside of the profile (or within voids). 
            </summary>
            <param name="point">The position to test.</param>
            <param name="containment">Whether the point is inside, outside, at an edge, or at a vertex.</param>
            <returns>True if the point is within the profile.</returns>
        </member>
        <member name="M:Elements.Geometry.Profile.UnionAll(System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Double)">
            <summary>
            Perform a union operation on a set of multiple profiles.
            </summary>
            <param name="profiles">The profiles with which to create a union.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>A new list of profiles comprising the union of all input profiles.</returns>
        </member>
        <member name="M:Elements.Geometry.Profile.Difference(System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Double)">
            <summary>
            Perform a difference operation on two sets of profiles.
            </summary>
            <param name="firstSet">The profiles to subtract from.</param>
            <param name="secondSet">The profiles to subtract with.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>A new list of profiles comprising the first set minus the second set.</returns>
        </member>
        <member name="M:Elements.Geometry.Profile.Intersection(System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Double)">
            <summary>
            Constructs the intersections between two sets of profiles.
            </summary>
            <param name="firstSet">The first set of profiles to intersect with.</param>
            <param name="secondSet">The second set of profiles to intersect with.</param>
            <param name="tolerance">An optional tolerance.</param>
            <returns>A new list of profiles comprising the overlap between the first set and the second set.</returns>
        </member>
        <member name="M:Elements.Geometry.Profile.Split(System.Collections.Generic.IEnumerable{Elements.Geometry.Profile},System.Collections.Generic.IEnumerable{Elements.Geometry.Polyline},System.Double,System.Double)">
            <summary>
            Split a set of profiles with a collection of open polylines, with an optional gap between results.
            </summary>
            <param name="profiles">The profiles to split</param>
            <param name="splitLines">The polylines defining the splits.</param>
            <param name="gapSize">An optional gap size between split pieces. If splits are failing, it can be helpful to increase this.</param>
            <param name="tolerance">An optional tolerance.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.Segments">
            <summary>
            Get all segments from a profile's perimeter and internal voids.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Representation">
            <summary>The representation of an element.</summary>
        </member>
        <member name="P:Elements.Geometry.Representation.SolidOperations">
            <summary>A collection of solid operations.</summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Extrude">
            <summary>An extrusion of a profile, in a direction, to a height.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Extrude.Profile">
            <summary>The id of the profile to extrude.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Extrude.Height">
            <summary>The height of the extrusion.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Extrude.Direction">
            <summary>The direction in which to extrude.</summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Lamina">
            <summary>A zero-thickness solid defined by a profile.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Lamina.Perimeter">
            <summary>The perimeter.</summary>
        </member>
        <member name="T:Elements.Geometry.Solids.SolidOperation">
            <summary>A solid operation.</summary>
            <summary>
            The base class for all operations which create solids.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.SolidOperation.IsVoid">
            <summary>Is the solid operation a void operation?</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.SolidOperation.LocalTransform">
            <summary>
            The local transform of the operation.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.SolidOperation.Solid">
            <summary>
            The solid operation's solid.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Sweep">
            <summary>A sweep of a profile along a curve.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Sweep.Profile">
            <summary>The id of the profile to be swept along the curve.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Sweep.Curve">
            <summary>The curve along which the profile will be swept.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Sweep.StartSetback">
            <summary>The amount to set back the resulting solid from the start of the curve.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Sweep.EndSetback">
            <summary>The amount to set back the resulting solid from the end of the curve.</summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Sweep.ProfileRotation">
            <summary>The rotation of the profile around the sweep's curve.</summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Edge">
            <summary>
            A Solid Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Id">
            <summary>
            The Id of the Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Left">
            <summary>
            The Left edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Right">
            <summary>
            The Right edge.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Edge.#ctor(System.Int64,Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)">
            <summary>
            Construct an Edge
            </summary>
            <param name="id"></param>
            <param name="from">The start Vertex of the Edge.</param>
            <param name="to">The end Vertex of the Edge.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Edge.ToString">
            <summary>
            Get the string representation of the Edge.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Face">
            <summary>
            A Solid Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Id">
            <summary>
            The Id of the Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Outer">
            <summary>
            A CCW wound list of Edges.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Inner">
            <summary>
            A collection of CW wound Edges.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Face.#ctor(System.Int64,Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])">
            <summary>
            Construct a Face.
            </summary>
            <param name="id"></param>
            <param name="outer">The outer loop of the Face.</param>
            <param name="inner">The inner loops of the Face.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Face.ToString">
            <summary>
            The string representation of the Face.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Solids.HalfEdge">
            <summary>
            One half of the directional components of an Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Edge">
            <summary>
            The Edge of which this is one half.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Vertex">
            <summary>
            The Vertex at the start of the edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Loop">
            <summary>
            The Loop to which this HalfEdge belongs.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.HalfEdge.#ctor(Elements.Geometry.Solids.Vertex)">
            <summary>
            Create a half edge.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.HalfEdge.#ctor(Elements.Geometry.Solids.Edge,Elements.Geometry.Solids.Vertex)">
            <summary>
            Construct a HalfEdge.
            </summary>
            <param name="edge">The Edge associated with this HalfEdge.</param>
            <param name="vertex">The Vertex at the start of the edge.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.HalfEdge.ToString">
            <summary>
            Get the string representation of this half edge.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Import.#ctor(Elements.Geometry.Solids.Solid,System.Boolean)">
            <summary>
            Create an import solid.
            </summary>
            <param name="solid">The solid which was imported.</param>
            <param name="isVoid">Is the operation a void?</param>
        </member>
        <member name="T:Elements.Geometry.Solids.Loop">
            <summary>
            A Loop of HalfEdges which bound a Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Loop.Face">
            <summary>
            The Face to which this Loop corresponds.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Loop.Edges">
            <summary>
            A collection of HalfEdges which comprise the Loop.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.#ctor">
            <summary>
            Construct a Loop.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.#ctor(Elements.Geometry.Solids.HalfEdge[])">
            <summary>
            Construct a Loop from an array of HalfEdges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.ToPolygon">
            <summary>
            Convert this loop to a polygon.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.AddEdgeToStart(Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Add a HalfEdge ot the start of the Loop.
            </summary>
            <param name="he"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.AddEdgeToEnd(Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Add a HalfEdge to the end of the Loop.
            </summary>
            <param name="he"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.InsertEdgeAfter(Elements.Geometry.Solids.HalfEdge,Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Insert the provided half edge after the target half edge.
            </summary>
            <param name="target">The half after which the new edge will be inserted.</param>
            <param name="newEdge">The half edge to be inserted.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.InsertEdgeBefore(Elements.Geometry.Solids.HalfEdge,Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Insert the provided half edge before the target half edge.
            </summary>
            <param name="target">The half before which the new edge will be inserted.</param>
            <param name="newEdge">The half edge to be inserted.</param>
        </member>
        <member name="T:Elements.Geometry.Solids.Solid">
            <summary>
            A boundary representation of a solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Faces">
            <summary>
            The Faces of the Solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Edges">
            <summary>
            The edges of the solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Vertices">
            <summary>
            The vertices of the solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.#ctor">
            <summary>
            Construct a solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.CreateLamina(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Construct a lamina solid.
            </summary>
            <param name="perimeter">The perimeter of the lamina's faces.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,System.Collections.Generic.IList{Elements.Geometry.Polygon},System.Double,System.Boolean,System.Double)">
            <summary>
            Construct a solid by sweeping a face.
            </summary>
            <param name="perimeter">The perimeter of the face to sweep.</param>
            <param name="holes">The holes of the face to sweep.</param>
            <param name="distance">The distance to sweep.</param>
            <param name="bothSides">Should the sweep start offset by direction distance/2? </param>
            <param name="rotation">An optional rotation in degrees of the perimeter around the z axis.</param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon,System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Geometry.Interfaces.ICurve,System.Double,System.Double)">
            <summary>
            Construct a solid by sweeping a face along a curve.
            </summary>
            <param name="perimeter">The perimeter of the face to sweep.</param>
            <param name="holes">The holes of the face to sweep.</param>
            <param name="curve">The curve along which to sweep.</param>
            <param name="startSetback">The setback distance of the sweep from the start of the curve.</param>
            <param name="endSetback">The setback distance of the sweep from the end of the curve.</param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Geometry.Vector3,System.Double,System.Boolean,System.Double)">
            <summary>
            Construct a solid by sweeping a face in a direction.
            </summary>
            <param name="perimeter">The perimeter of the face to sweep.</param>
            <param name="holes">The holes of the face to sweep.</param>
            <param name="direction">The direction in which to sweep.</param>
            <param name="distance">The distance to sweep.</param>
            <param name="bothSides">Should the sweep start offset by direction distance/2? </param>
            <param name="rotation">An optional rotation in degrees of the perimeter around the direction vector.</param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)">
            <summary>
            Add a Vertex to the Solid.
            </summary>
            <param name="position"></param>
            <returns>The newly added vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon,System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Add a Face to the Solid.
            </summary>
            <param name="outer">A polygon representing the perimeter of the face.</param>
            <param name="inner">An array of polygons representing the holes in the face.</param>
            <returns>The newly added face.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)">
            <summary>
            Add an edge to the solid.
            </summary>
            <param name="from">The start vertex.</param>
            <param name="to">The end vertex.</param>
            <returns>The newly added edge.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])">
            <summary>
            Add a face to the solid.
            Provided edges are expected to be wound CCW for outer,
            and CW for inner. The face will be linked to the edges.
            </summary>
            <param name="outer">The outer Loop of the Face.</param>
            <param name="inner">The inner Loops of the Face.</param>
            <returns>The newly added Face.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)">
            <summary>
            Creates a series of edges from a polygon.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.Slice(Elements.Geometry.Plane)">
            <summary>
            Slice a solid with the provided plane.
            </summary>
            <param name="p">The plane to be used to slice this solid.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.ToString">
            <summary>
            Get the string representation of the solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.Tessellate(Elements.Geometry.Mesh@,Elements.Geometry.Transform,Elements.Geometry.Color)">
            <summary>
            Triangulate this solid.
            </summary>
            <param name="mesh">The mesh to which the solid's tessellated data will be added.</param>
            <param name="transform">An optional transform used to transform the generated vertex coordinates.</param>
            <param name="color">An optional color to apply to the vertex.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.Tessellate(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Single[]@,System.Single[]@,System.UInt16@,System.UInt16@,System.Double[]@,System.Double[]@)">
            <summary>
            Triangulate this solid and pack the triangulated data into buffers
            appropriate for use with gltf.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)">
            <summary>
            Create a face from edges.
            The first edge array is treated as the outer edge.
            Additional edge arrays are treated as holes.
            </summary>
            <param name="edges"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.SolidExtensions.ToContourVertexArray(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Face)">
            <summary>
            Convert Loop to an array of ContourVertex.
            </summary>
            <param name="loop"></param>
            <param name="face"></param>
        </member>
        <member name="T:Elements.Geometry.Solids.Vertex">
            <summary>
            A Solid Vertex.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.Id">
            <summary>
            The Id of the Vertex.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.HalfEdge">
            <summary>
            The HalfEdge which has this Vertex as its start.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.Point">
            <summary>
            The location of the Vertex.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Vertex.#ctor(System.Int64,Elements.Geometry.Vector3)">
            <summary>
            Construct a Vertex.
            </summary>
            <param name="id"></param>
            <param name="point">The location of the Vertex.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Vertex.ToString">
            <summary>
            Get the string representation of the Vertex.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Transform">
            <summary>A right-handed coordinate system with +Z up.</summary>
            <summary>
            A right-handed coordinate with +z up.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/TransformTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Geometry.Transform.Matrix">
            <summary>The transform's matrix.</summary>
        </member>
        <member name="P:Elements.Geometry.Transform.Origin">
            <summary>
            The origin of the transform.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.XAxis">
            <summary>
            The x axis of the transform.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.YAxis">
            <summary>
            The y axis of the transform.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.ZAxis">
            <summary>
            The z axis of the transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor">
            <summary>
            Create the identity transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Transform)">
            <summary>
            Create a transform by copying another transform.
            </summary>
            <param name="t">The transform to copy.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Create a transform with a translation.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="rotation">An optional rotation in degrees around the transform's z axis.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a transform with a translation.
            </summary>
            <param name="x">The X component of translation.</param>
            <param name="y">The Y component of translation.</param>
            <param name="z">The Z component of translation.</param>
            <param name="rotation">An optional rotation in degrees around the transform's z axis.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)">
            <summary>
            Create a transform centered at origin with its Z axis pointing
            along up.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="z">The vector which will define the Z axis of the transform.</param>
            <param name="rotation">An optional rotation around the z axis.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)">
            <summary>
            Create a transform by origin and X and Z axes.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="xAxis">The X axis of the transform.</param>
            <param name="zAxis">The Z axis of the transform.</param>
            <param name="rotation">An optional rotation in degrees around the transform's z axis.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a transform by origin, X, Y, and Z axes. Axes are automatically unitized — to create non-uniform transforms, use Transform.Scale.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="xAxis">The X axis of the transform.</param>
            <param name="yAxis">The Y axis of the transform.</param>
            <param name="zAxis">The Z axis of the transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.ToString">
            <summary>
            Get a string representation of the transform.
            </summary>
            <returns>A string representation of the transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPoint(Elements.Geometry.Vector3)">
            <summary>
            Transform a vector into the coordinate space defined by this transform ignoring the translation.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>A new vector transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)">
            <summary>
            Transform a vector into the coordinate space defined by this transform.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>A new vector transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfCurve(Elements.Geometry.Curve)">
            <summary>
            A transformed copy of the supplied curve.
            </summary>
            <param name="curve">The curve to transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)">
            <summary>
            Transform the specified polygon.
            </summary>
            <param name="polygon">The polygon to transform.</param>
            <returns>A new polygon transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPolygons(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Transform the specified polygons.
            </summary>
            <param name="polygons">The polygons to transform.</param>
            <returns>An array of polygons transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)">
            <summary>
            Transform the specified line.
            </summary>
            <param name="line">The line to transform.</param>
            <returns>A new line transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPlane(Elements.Geometry.Plane)">
            <summary>
            Transform the specified plane.
            </summary>
            <param name="plane">The plane to transform.</param>
            <returns>A new plane transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)">
            <summary>
            Transform the specified profile.
            </summary>
            <param name="profile">The profile to transform.</param>
            <returns>A new profile transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfBezier(Elements.Geometry.Bezier)">
            <summary>
            Transform the specifed bezier.
            </summary>
            <param name="bezier">The bezier to transform.</param>
            <returns>A new bezier transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)">
            <summary>
            Concatenate the transform.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Elements.Geometry.Transform.Concatenated(Elements.Geometry.Transform)">
            <summary>
            Return a new transform which is the supplied transform concatenated to this transform.
            </summary>
            <param name="transform">The transform to concatenate.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Invert">
            <summary>
            Invert this transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)">
            <summary>
            Apply a translation to the transform.
            </summary>
            <param name="translation">The translation to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Move(System.Double,System.Double,System.Double)">
            <summary>
            Apply a translation to the transform.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Elements.Geometry.Transform.Moved(System.Double,System.Double,System.Double)">
            <summary>
            Return a new transform which is this transform moved by the specified amount.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Elements.Geometry.Transform.Moved(Elements.Geometry.Vector3)">
            <summary>
            Return a new transform which is this transform moved by the specified amount.
            </summary>
            <param name="translation">The translation to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Apply a rotation to the transform.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Rotate(System.Double)">
            <summary>
            Apply a rotation to the transform around the Z axis.
            </summary>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)">
            <summary>
            Apply a scale to the transform.
            </summary>
            <param name="amount">The amount to scale.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Scaled(Elements.Geometry.Vector3)">
            <summary>
            Return a copy of this transform scaled by the given value.
            </summary>
            <param name="amount">The amount to scale.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Reflect(Elements.Geometry.Vector3)">
            <summary>
            Reflect about the plane with normal n.
            </summary>
            <param name="n">The normal of the reflection plane.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.XY">
            <summary>
            Calculate XY plane of the transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.YZ">
            <summary>
            Calculate the YZ plane of the transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.XZ">
            <summary>
            Calculate the XZ plane of the transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.Scale(System.Double)">
            <summary>
            Scale uniformly about the origin.
            </summary>
            <param name="factor">The amount to scale uniformly</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Scaled(System.Double)">
            <summary>
            Return a copy of this transform scaled uniformly.
            </summary>
            <param name="factor">The amount to scale uniformly</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Scale(System.Double,Elements.Geometry.Vector3)">
            <summary>
            Scale uniformly about a point
            </summary>
            <param name="factor">The scale factor</param>
            <param name="origin">The origin of scaling</param>
        </member>
        <member name="M:Elements.Geometry.Transform.CreateOrientedAlongCurve(Elements.Geometry.Curve,System.Double,Elements.Geometry.Vector3)">
            <summary>
            Create a transform that is oriented along 
            a curve at parameter t. The transform's +z axis will align with 
            the +z world axis, and the +x axis will align with the tangent
            of the curve.
            </summary>
            <param name="curve">The curve along which to orient the transform.</param>
            <param name="t">A parameter value between 0.0 and 1.0.</param>
            <param name="up"></param>
        </member>
        <member name="M:Elements.Geometry.Transform.Equals(Elements.Geometry.Transform)">
            <summary>
            Is this transform equal to the provided transform?
            </summary>
            <param name="other">The transform to test.</param>
            <returns>True if the two transforms are equal, otherwise false.</returns>
        </member>
        <member name="T:Elements.Geometry.Triangle">
            <summary>A mesh triangle.</summary>
        </member>
        <member name="P:Elements.Geometry.Triangle.Vertices">
            <summary>The triangle's vertices.</summary>
        </member>
        <member name="P:Elements.Geometry.Triangle.Normal">
            <summary>The triangle's normal.</summary>
        </member>
        <member name="M:Elements.Geometry.Triangle.#ctor(Elements.Geometry.Vertex,Elements.Geometry.Vertex,Elements.Geometry.Vertex)">
            <summary>
            Create a triangle.
            </summary>
            <param name="a">The index of the first vertex of the triangle.</param>
            <param name="b">The index of the second vertex of the triangle.</param>
            <param name="c">The index of the third vertex of the triangle.</param>
        </member>
        <member name="M:Elements.Geometry.Triangle.Area">
            <summary>
            The area of the triangle.
            </summary>
        </member>
        <member name="T:Elements.Geometry.UV">
            <summary>A UV coordinate.</summary>
        </member>
        <member name="P:Elements.Geometry.UV.U">
            <summary>The U coordinate.</summary>
        </member>
        <member name="P:Elements.Geometry.UV.V">
            <summary>The V coordinate.</summary>
        </member>
        <member name="M:Elements.Geometry.UV.Equals(System.Object)">
            <summary>
            Are the two uvs equal?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.Geometry.UV.op_Equality(Elements.Geometry.UV,Elements.Geometry.UV)">
            <summary>
            Are the two UVs equal?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.UV.op_Inequality(Elements.Geometry.UV,Elements.Geometry.UV)">
            <summary>
            Are the two UVs equal?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.UV.GetHashCode">
            <summary>
            Get the hash code for the uv.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.UV.ToString">
            <summary>
            A string representation of the uv.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Vector3">
            <summary>A 3D vector.</summary>
            <summary>
            A 3D vector.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.Z">
            <summary>The Z component of the vector.</summary>
        </member>
        <member name="F:Elements.Geometry.Vector3.EPSILON">
            <summary>
            A tolerance for comparison operations of 1e-5.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.Origin">
            <summary>
            Create a vector at the origin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.GetHashCode">
            <summary>
            Get the hash code for the vector.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.XAxis">
            <summary>
            Create a vector along the X axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.YAxis">
            <summary>
            Create a vector along the Y axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.ZAxis">
            <summary>
            Create a vector along the Z axis.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)">
            <summary>
            Create vectors at n equal spaces along the provided line.
            </summary>
            <param name="line">The line.</param>
            <param name="n">The number of samples along the line.</param>
            <param name="includeEnds">A flag indicating whether or not to include points for the start and end of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor(Elements.Geometry.Vector3)">
            <summary>
            Create a Vector3 by copying the components of another Vector3.
            </summary>
            <param name="v">The Vector3 to copy.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor(System.Double,System.Double)">
            <summary>
            Create a vector from x, and y coordinates.
            </summary>
            <param name="x">The x coordinate of the vector.</param>
            <param name="y">Thy y coordinate of the vector.</param>
            <exception>Thrown if any components of the vector are NaN or Infinity.</exception>
        </member>
        <member name="M:Elements.Geometry.Vector3.Length">
            <summary>
            Get the length of this vector.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.Unitized">
            <summary>
            Return a new vector which is the unitized version of this vector.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)">
            <summary>
            Compute the cross product of this vector and v.
            </summary>
            <param name="v">The vector with which to compute the cross product.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)">
            <summary>
            Compute the dot product of this vector and v.
            </summary>
            <param name="v">The vector with which to compute the dot product.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)">
            <summary>
            The angle in degrees from this vector to the provided vector.
            Note that for angles in the plane that can be greater than 180 degrees,
            you should use Vector3.PlaneAngleTo.
            </summary>
            <param name="v">The vector with which to measure the angle.</param>
            <returns>The angle in degrees between 0 and 180. </returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.PlaneAngleTo(Elements.Geometry.Vector3)">
            <summary>
            Calculate a counter-clockwise plane angle between this vector and the provided vector in the XY plane.
            </summary>
            <param name="v">The vector with which to measure the angle.</param>
            <returns>Angle in degrees between 0 and 360, or NaN if the projected input vectors are invalid.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.PlaneAngleTo(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Calculate a counter-clockwise plane angle between this vector and the provided vector, projected to the plane perpendicular to the provided normal.
            </summary>
            <param name="v">The vector with which to measure the angle.</param>
            <param name="normal">The normal of the plane in which you wish to calculate the angle.</param>
            <returns>Angle in degrees between 0 and 360, or NaN if the projected input vectors are invalid.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)">
            <summary>
            The distance from this point to b.
            </summary>
            <param name="v">The target vector.</param>
            <returns>The distance between this vector and the provided vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)">
            <summary>
            The distance from this point to the plane.
            The distance will be negative when this point lies
            "behind" the plane.
            </summary>
            <param name="p">The plane.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Line,Elements.Geometry.Vector3@)">
            <summary>
            Find the distance from this point to the line, and output the location
            of the closest point on that line.
            Using formula from https://diego.assencio.com/?index=ec3d5dfdfc0b6a0d147a656f0af332bd
            </summary>
            <param name="line">The line to find the distance to.</param>
            <param name="closestPoint">The point on the line that is closest to this point.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Line)">
            <summary>
            Find the distance from this point to the line.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Polyline,Elements.Geometry.Vector3@)">
            <summary>
            Find the shortest distance from this point to any point on the
            polyline, and output the location of the closest point on that polyline.
            </summary>
            <param name="polyline">The polyline for computing the distance.</param>
            <param name="closestPoint">The point on the polyline that is closest to this point.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Polyline)">
            <summary>
            Find the shortest distance from this point to any point on the
            polyline, and output the location of the closest point on that polyline.
            </summary>
            <param name="polyline">The polyline for computing the distance.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)">
            <summary>
            Compute the average of this Vector3 and v.
            </summary>
            <param name="v">The vector with which to compute the average.</param>
            <returns>A vector which is the average of this and v.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)">
            <summary>
            Project vector a onto this vector.
            </summary>
            <param name="a">The vector to project onto this vector.</param>
            <returns>A new vector which is the projection of a onto this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Multiply(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
            <param name="v">The vector to multiply.</param>
            <param name="a">The scalar value to multiply.</param>
            <returns>A vector whose magnitude is multiplied by a.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Multiply(System.Double,Elements.Geometry.Vector3)">
            <summary>
            Multiply a scalar and a vector.
            </summary>
            <param name="a">The scalar value to multiply.</param>
            <param name="v">The vector to multiply.</param>
            <returns>A vector whose magnitude is multiplied by a.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Division(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Divide a vector by a scalar.
            </summary>
            <param name="a">The scalar divisor.</param>
            <param name="v">The vector to divide.</param>
            <returns>A vector whose magnitude is multiplied by a.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Subtract two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector which is the difference between a and b.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Add two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector which is the sum of a and b.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are greater than those of vector b.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if all of a's components are greater than those of b, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are less than those of vector b.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if all of a's components are less than those of b, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Equality(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Are the two vectors the same within Epsilon?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Inequality(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Are the two vectors not the same within Epsilon?
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)">
            <summary>
            Determine whether this vector is parallel to v.
            </summary>
            <param name="v">The vector to compare to this vector.</param>
            <returns>True if the vectors are parallel, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Negate">
            <summary>
            Construct a new vector which is the inverse of this vector.
            </summary>
            <returns>A new vector which is the inverse of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ToArray">
            <summary>
            Convert a vector's components to an array.
            </summary>
            <returns>An array of comprised of the x, y, and z components of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ToString">
            <summary>
            A string representation of the vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Determine whether this vector's components are equal to those of v, within tolerance.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="tolerance">Optional custom tolerance value.</param>
            <returns>True if the difference of this vector and the supplied vector's components are all within Tolerance, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsAlmostEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determine whether this vector's components are equal to the provided components, within tolerance.
            </summary>
            <param name="x">The x component to compare.</param>
            <param name="y">The y component to compare.</param>
            <param name="z">The z component to compare.</param>
            <returns>True if the difference of this vector and the supplied vector's components are all within Tolerance, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)">
            <summary>
            Project this vector onto the plane.
            </summary>
            <param name="p">The plane on which to project the point.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)">
            <summary>
            Project this vector onto the plane along a vector.
            </summary>
            <param name="v">The vector along which t project.</param>
            <param name="p">The plane on which to project.</param>
            <returns>A point on the plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)">
            <summary>
            Implement IComparable interface.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)">
            <summary>
            Is this vector equal to the provided vector?
            </summary>
            <param name="other">The vector to test.</param>
            <returns>Returns true if all components of the two vectors are within Epsilon, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Equals(System.Object)">
            <summary>
            Is this vector equal to the provided vector?
            </summary>
            <param name="other">The vector to test.</param>
            <returns>Returns true if all components of the two vectors are within Epsilon, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsNaN">
            <summary>
            Are any components of this vector NaN?
            </summary>
            <returns>True if any components are NaN otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsZero">
            <summary>
            Is this vector zero length?
            </summary>
            <returns>True if this vector's components are all less than Epsilon.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.TripleProduct(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Check if two vectors are coplanar.
            </summary>
            <param name="b">The second vector.</param>
            <param name="c">The third vector.</param>
            <returns>True is the vectors are coplanar, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ClosestPointOn(Elements.Geometry.Line)">
            <summary>
            Get the closest point on the line from this point.
            </summary>
            <param name="line">The line on which to find the closest point.</param>
            <returns>The closest point on the line from this point.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.CCW(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Check whether three points are wound CCW in two dimensions.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <returns>Greater than 0 if the points are CCW, less than 0 if they are CW, and 0 if they are colinear.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ComputeDefaultBasisVectors">
            <summary>
            Compute basis vectors for this vector.
            By default, the cross product of the world Z axis and this vector
            are used to compute the U direction. If this vector is parallel
            the world Z axis, then the world Y axis is used instead.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.RemoveSequentialDuplicates(System.Collections.Generic.IList{Elements.Geometry.Vector3},System.Boolean,System.Double)">
            <summary>
            Remove sequential duplicates from a list of points. 
            </summary>
            <param name="vertices"></param>
            <param name="wrap">Whether or not to assume a closed shape like a polygon. If true, the last vertex will be compared to the first, and deleted if identical.</param>
            <param name="tolerance">An optional distance tolerance for the comparison.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Vertex">
            <summary>A mesh vertex.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.Normal">
            <summary>The vertex's normal.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.Color">
            <summary>The vertex's color.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.Index">
            <summary>The index of the vertex within a mesh.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.UV">
            <summary>The vertex's texture coordinate.</summary>
        </member>
        <member name="P:Elements.Geometry.Vertex.Triangles">
            <summary>The triangles associated with this vertex.</summary>
        </member>
        <member name="M:Elements.Geometry.Vertex.#ctor(Elements.Geometry.Vector3,System.Nullable{Elements.Geometry.Vector3},Elements.Geometry.Color)">
            <summary>
            Create a vertex.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The vertex's normal.</param>
            <param name="color">The vertex's color.</param>
        </member>
        <member name="T:Elements.Geometry.FrameType">
            <summary>
            The frame type to be used for operations requiring 
            a moving frame around the curve.
            </summary>
        </member>
        <member name="F:Elements.Geometry.FrameType.Frenet">
            <summary>
            A Frenet frame.
            </summary>
        </member>
        <member name="F:Elements.Geometry.FrameType.RoadLike">
            <summary>
            A frame with the up axis aligned with +Z.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Bezier">
            <summary>
            A Bezier curve.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/BezierTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Geometry.Bezier.ControlPoints">
            <summary>
            A collection of points describing the bezier's frame.
            https://en.wikipedia.org/wiki/B%C3%A9zier_curve
            </summary>
        </member>
        <member name="P:Elements.Geometry.Bezier.FrameType">
            <summary>
            The frame type to use when calculating transforms along the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Bezier.#ctor(System.Collections.Generic.List{Elements.Geometry.Vector3},Elements.Geometry.FrameType)">
            <summary>
            Construct a bezier.
            </summary>
            <param name="controlPoints">The control points of the curve.</param>
            <param name="frameType">The frame type to use when calculating frames.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.Bounds">
            <summary>
            Get the bounding box of the curve's control points.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Bezier.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of transforms along the curve.
            </summary>
            <param name="startSetback"></param>
            <param name="endSetback"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Bezier.Length">
            <summary>
            Get a piecewise linear approximation of the length of the curve.
            https://en.wikipedia.org/wiki/Arc_length
            </summary>
        </member>
        <member name="M:Elements.Geometry.Bezier.PointAt(System.Double)">
            <summary>
            Get the point on the curve at parameter u.
            </summary>
            <param name="u">The parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.Factorial(System.Int32)">
            <summary>
            https://en.wikipedia.org/wiki/Factorial
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Elements.Geometry.Bezier.TransformAt(System.Double)">
            <summary>
            Get the transform on the curve at parameter u.
            </summary>
            <param name="u">The parameter along the curve between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.VelocityAt(System.Double)">
            <summary>
            Get the velocity to the curve at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.AccelerationAt(System.Double)">
            <summary>
            Get the acceleration of the curve at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.TangentAt(System.Double)">
            <summary>
            Get the tangent to the curve at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.NormalAt(System.Double)">
            <summary>
            Get the normal of the curve at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.BinormalAt(System.Double)">
            <summary>
            Get the binormal to the curve at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.TransformedBezier(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Bezier.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Bezier.Transformed(Elements.Geometry.Transform)">
            <summary>
            Construct a transformed copy of this Curve.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="T:Elements.Geometry.Circle">
            <summary>
            An arc with a start angle of 0 (+X) and 
            an end angle of 360.0.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Circle.#ctor(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Construct a circle.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:Elements.Geometry.Circle.#ctor(System.Double)">
            <summary>
            Construct a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:Elements.Geometry.Circle.ToPolygon(System.Int32)">
            <summary>
            Create a polygon through a set of points along the arc.
            </summary>
            <param name="divisions">The number of divisions of the arc.</param>
            <returns>A polygon.</returns>
        </member>
        <member name="T:Elements.Geometry.Colors">
            <summary>
            Commonly used colors.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Cobalt">
            <summary>
            Cobalt
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Darkgray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Emerald">
            <summary>
            Emerald
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Granite">
            <summary>
            Granite
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Mint">
            <summary>
            Mint
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Sand">
            <summary>
            Sand
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Stone">
            <summary>
            Stone
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="T:Elements.Geometry.Containment">
            <summary>
            Represents the state of containment of a point relative to an enclosing polygon, profile, or solid.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Containment.Outside">
            <summary>
            The point lies entirely outside.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Containment.Inside">
            <summary>
            The point lies entirely inside.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Containment.CoincidesAtEdge">
            <summary>
            The point lies exactly or nearly at an edge.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Containment.CoincidesAtVertex">
            <summary>
            The point lies exactly or nearly at a vertex.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Containment.CoincidesAtFace">
            <summary>
            The point lies exactly or nearly at a face.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Contour">
            <summary>
            A continguous set of curves.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ContourTests.cs?name=example)]
            </example>
        </member>
        <member name="M:Elements.Geometry.Contour.#ctor(System.Collections.Generic.List{Elements.Geometry.Curve})">
            <summary>
            Construct a contour.
            </summary>
            <param name="curves">A list of curves to create the contour.</param>
            <exception>Throws an ArgumentException when the provided curves are not contiguous.</exception>
        </member>
        <member name="M:Elements.Geometry.Contour.GetEnumerator">
            <summary>
            Get the enumerator for the collection of curves.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Contour.ToPolygon">
            <summary>
            Convert the contour to a polygon.
            </summary>
        </member>
        <member name="T:Elements.Geometry.ConvexHull">
            <summary>
            A utility class for calculating Convex Hulls from inputs
            </summary>
        </member>
        <member name="M:Elements.Geometry.ConvexHull.FromPoints(System.Collections.Generic.IEnumerable{Elements.Geometry.Vector3})">
            <summary>
            Calculate a polygon from the 2d convex hull of a collection of points. 
            Adapted from https://rosettacode.org/wiki/Convex_hull#C.23
            </summary>
            <param name="points">A collection of points</param>
            <returns>A polygon representing the convex hull of the provided points.</returns>
        </member>
        <member name="M:Elements.Geometry.ConvexHull.FromPolyline(Elements.Geometry.Polyline)">
            <summary>
            Calculate a polygon from the 2d convex hull of a polyline or polygon's vertices. 
            </summary>
            <param name="p">A polygon</param>
            <returns>A polygon representing the convex hull of the provided shape.</returns>
        </member>
        <member name="M:Elements.Geometry.ConvexHull.FromPolylines(System.Collections.Generic.IEnumerable{Elements.Geometry.Polyline})">
            <summary>
            Calculate a polygon from the 2d convex hull of the vertices of a collection of polylines or polygons. 
            </summary>
            <param name="polylines">A collection of polygons</param>
            <returns>A polygon representing the convex hull of the provided shapes.</returns>
        </member>
        <member name="M:Elements.Geometry.ConvexHull.FromProfile(Elements.Geometry.Profile)">
            <summary>
            Calculate a polygon from the 2d convex hull of a profile. 
            </summary>
            <param name="p">A profile</param>
            <returns>A polygon representing the convex hull of the provided shape.</returns>
        </member>
        <member name="M:Elements.Geometry.CsgExtensions.Tessellate(Csg.Solid,Elements.Geometry.Mesh@,Elements.Geometry.Transform,Elements.Geometry.Color)">
            <summary>
            Write the csg into a mesh.
            </summary>
        </member>
        <member name="M:Elements.Geometry.CsgExtensions.Tessellate(Csg.Solid,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Single[]@,System.Single[]@,System.UInt16@,System.UInt16@,System.Double[]@,System.Double[]@)">
            <summary>
            Triangulate this csg and pack the triangulated data into buffers
            appropriate for use with gltf.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Interfaces.ICurve">
            <summary>
            ICurve is implemented by all curve types.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Length">
            <summary>
            Calculate the length of the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)">
            <summary>
            Get a point along the curve at parameter u.
            </summary>
            <param name="u">A parameter on the curve between 0.0 and 1.0.</param>
            <returns>The point on the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)">
            <summary>
            Get the frame from the curve at parameter u.
            </summary>
            <param name="u">A parameter on the curve between 0.0 and 1.0.</param>
            <returns>The transform of the curve at parameter u, with the transform's Z axis tangent to the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of Transforms which represent frames along this ICurve.
            </summary>
            <param name="startSetback">The offset from the start of the ICurve.</param>
            <param name="endSetback">The offset from the end of the ICurve.</param>
            <returns>A collection of Transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Bounds">
            <summary>
            Get the bounding box of this curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@,Elements.Geometry.Transform,Elements.Geometry.Color)">
            <summary>
            Add the tessellated representation of this object
            to the provided Mesh.
            </summary>
            <param name="mesh">The mesh to which this object's representation will be added.</param>
            <param name="transform">An optional transform to apply to each vertex.</param>
            <param name="color">An optional color to apply to each vertex.</param>
        </member>
        <member name="T:Elements.Geometry.Interfaces.ITransformable`1">
            <summary>
            An object that can return a transformed copy of itself 
            </summary>
            <typeparam name="T">The type of object to be transformed</typeparam>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ITransformable`1.Transformed(Elements.Geometry.Transform)">
            <summary>
            Create a transformed copy of this ITransformable
            </summary>
            <param name="transform"></param>
            <returns>A transformed copy of the object</returns>
        </member>
        <member name="T:Elements.Geometry.Kernel">
            <summary>
            The geometry kernel.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Kernel.Instance">
            <summary>
            The Kernel singleton.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Kernel.CreateSweepAlongCurve(Elements.Geometry.Profile,Elements.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Create a sweep along a curve.
            </summary>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Kernel.CreateExtrude(Elements.Geometry.Profile,System.Double,Elements.Geometry.Vector3)">
            <summary>
            Create an extrude.
            </summary>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Kernel.CreateLamina(Elements.Geometry.Polygon)">
            <summary>
            Create a lamina.
            </summary>
            <returns>A solid.</returns>
        </member>
        <member name="T:Elements.Geometry.BooleanMode">
            <summary>
            Mode to apply a boolean operation
            </summary>
        </member>
        <member name="F:Elements.Geometry.BooleanMode.Difference">
            <summary>
            A and not B
            </summary>
        </member>
        <member name="F:Elements.Geometry.BooleanMode.Union">
            <summary>
            A or B
            </summary>
        </member>
        <member name="F:Elements.Geometry.BooleanMode.Intersection">
            <summary>
            A and B
            </summary>
        </member>
        <member name="F:Elements.Geometry.BooleanMode.XOr">
            <summary>
            Exclusive or — either A or B but not both.
            </summary>
        </member>
        <member name="T:Elements.Geometry.VoidTreatment">
            <summary>
            Controls the handling of internal regions in a polygon boolean operation.
            </summary>
        </member>
        <member name="F:Elements.Geometry.VoidTreatment.PreserveInternalVoids">
            <summary>
            Use an Even/Odd fill pattern to decide whether internal polygons are solid or void.
            This corresponds to Clipper's "EvenOdd" PolyFillType.
            </summary>
        </member>
        <member name="F:Elements.Geometry.VoidTreatment.IgnoreInternalVoids">
            <summary>
            Treat all contained or overlapping polygons as solid.
            This corresponds to Clipper's "Positive" PolyFillType.
            </summary>
        </member>
        <member name="T:Elements.Geometry.PolygonExtensions">
            <summary>
            Polygon extension methods.
            </summary>
        </member>
        <member name="M:Elements.Geometry.PolygonExtensions.ToClipperPath(Elements.Geometry.Polygon,System.Double)">
            <summary>
            Construct a clipper path from a Polygon.
            </summary>
            <param name="p"></param>
            <param name="tolerance">Optional tolerance value. If converting back to a polygon after the operation, be sure to use the same tolerance value.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.PolygonExtensions.ToPolygon(System.Collections.Generic.List{ClipperLib.IntPoint},System.Double)">
            <summary>
            Construct a Polygon from a clipper path
            </summary>
            <param name="p"></param>
            <param name="tolerance">Optional tolerance value. Be sure to use the same tolerance value as you used when converting to Clipper path.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.PolylineExtensions">
            <summary>
            Polyline extension methods.
            </summary>
        </member>
        <member name="M:Elements.Geometry.PolylineExtensions.ToClipperPath(Elements.Geometry.Polyline,System.Double)">
            <summary>
            Construct a clipper path from a Polygon.
            </summary>
            <param name="p"></param>
            <param name="tolerance">An optional tolerance. If converting back to a Polyline, be sure to use the same tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.PolylineExtensions.ToPolyline(Elements.Geometry.Line)">
            <summary>
            Convert a line to a polyline
            </summary>
            <param name="l">The line to convert.</param>
        </member>
        <member name="T:Elements.Geometry.EndType">
            <summary>
            Offset end types
            </summary>
        </member>
        <member name="F:Elements.Geometry.EndType.Square">
            <summary>
            Open ends are extended by the offset distance and squared off
            </summary>
        </member>
        <member name="F:Elements.Geometry.EndType.Butt">
            <summary>
            Ends are squared off with no extension
            </summary>
        </member>
        <member name="F:Elements.Geometry.EndType.ClosedPolygon">
            <summary>
            If open, ends are joined and treated as a closed polygon
            </summary>
        </member>
        <member name="T:Elements.Geometry.ProfileExtensions">
            <summary>
            Profile extension methods.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.HSSPipeProfileServer">
            <summary>
            A singleton class which serves every HSS pipe section as defined by AISC.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profiles.HSSPipeProfileServer.Instance">
            <summary>
            The HSSPipeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.ProfileServer`1">
            <summary>
            Base class for all types which serve profiles.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.ProfileServer`1.InchesToMeters">
            <summary>
            A conversion factor from inches to meters.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.ProfileServer`1._profiles">
            <summary>
            The map of Profiles.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profiles.ProfileServer`1.GetProfileByName(System.String)">
            <summary>
            Get a profile by name from the server.
            </summary>
            <param name="name"></param>
            <returns>A profile. Throws an exception if a profile with the specified name cannot be found.</returns>
            <exception>Thrown when a profile with the specfied name cannot be found.</exception>
        </member>
        <member name="M:Elements.Geometry.Profiles.ProfileServer`1.GetProfileByType(`0)">
            <summary>
            Get a profile by type enumeration from the server.
            </summary>
            <param name="type">The enumerated type of the profile.</param>
            <returns>A profile. Throws an exception if a profile with the specified name cannot be found.</returns>
            <exception>Thrown when a profile of the specfied type cannot be found.</exception>
        </member>
        <member name="M:Elements.Geometry.Profiles.ProfileServer`1.AllProfiles">
            <summary>
            Get all Profiles available in the WideFlangeProfileServer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Profiles.VerticalAlignment">
            <summary>
            The vertical alignment of a profile.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.VerticalAlignment.Top">
            <summary>
            Align the profile along its top.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.VerticalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.VerticalAlignment.Bottom">
            <summary>
            Align the profile along its bottom.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.HorizontalAlignment">
            <summary>
            The horizontal alignment of a profile.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.HorizontalAlignment.Left">
            <summary>
            Align the profile along its left edge.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.HorizontalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.HorizontalAlignment.Right">
            <summary>
            Align the profile along its right edge.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.WideFlangeProfileServer">
             <summary>
            A singleton class which serves every Wide Flange section as defined by AISC.
             </summary>
        </member>
        <member name="P:Elements.Geometry.Profiles.WideFlangeProfileServer.Instance">
            <summary>
            The WideFlangeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Quaternion">
            <summary>
            A quaternion.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Quaternion.X">
            <summary>
            The X component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.Y">
            <summary>
            The Y component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.Z">
            <summary>
            The Z component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.W">
            <summary>
            The W component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Quaternion.#ctor(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Construct a Quaternion from an axis and an angle in radians.
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="T:Elements.Geometry.Ray">
            <summary>
            An infinite ray starting at origin and pointing towards direction.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Ray.Origin">
            <summary>
            The origin of the ray.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Ray.Direction">
            <summary>
            The direction of the ray.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Ray.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Triangle,Elements.Geometry.Vector3@)">
            <summary>
            https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
            </summary>
            <param name="tri">The triangle to intersect.</param>
            <param name="result">The intersection result.</param>
            <returns>True if an intersection occurs, otherwise false. If true, check the intersection result for the type and location of intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.GeometricElement,System.Collections.Generic.List{Elements.Geometry.Vector3}@)">
            <summary>
            Does this ray intersect with the provided GeometricElement? Only GeometricElements with Solid Representations are currently supported, and voids will be ignored.
            </summary>
            <param name="element">The element to intersect with.</param>
            <param name="result">The list of intersection results.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Solids.SolidOperation,System.Collections.Generic.List{Elements.Geometry.Vector3}@)">
            <summary>
            Does this ray intersect with the provided SolidOperation?
            </summary>
            <param name="solidOp">The SolidOperation to intersect with.</param>
            <param name="result">The list of intersection results, ordered by distance from the ray origin.</param>
            <returns>True if an intersection occurs, otherwise false. If true, check the intersection result for the location of the intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Solids.Solid,System.Collections.Generic.List{Elements.Geometry.Vector3}@)">
            <summary>
            Does this ray intersect with the provided Solid? 
            </summary>
            <param name="solid">The Solid to intersect with.</param>
            <param name="result">The intersection result.</param>
            <returns>True if an intersection occurs, otherwise false. If true, check the intersection result for the location of the intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Solids.Face,Elements.Geometry.Vector3@)">
            <summary>
            Does this ray intersect with the provided face?
            </summary>
            <param name="face">The Face to intersect with.</param>
            <param name="result">The intersection result.</param>
            <returns>True if an intersection occurs, otherwise false. If true, check the intersection result for the location of the intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Plane,Elements.Geometry.Vector3@)">
            <summary>
            Does this ray intersect the provided plane?
            </summary>
            <param name="plane">The Plane to intersect with.</param>
            <param name="result">The intersection result.</param>
            <returns>True if an intersection occurs, otherwise false — this can occur if the ray is very close to parallel to the plane.
            If true, check the intersection result for the location of the intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Plane,Elements.Geometry.Vector3@,System.Double@)">
            <summary>
            Does this ray intersect the provided plane?
            </summary>
            <param name="plane">The Plane to intersect with.</param>
            <param name="result">The intersection result.</param>
            <param name="t"></param>
            <returns>True if an intersection occurs, otherwise false — this can occur if the ray is very close to parallel to the plane.
            If true, check the intersection result for the location of the intersection.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Topography,Elements.Geometry.Vector3@)">
            <summary>
            Does this ray intersect the provided topography?
            </summary>
            <param name="topo">The topography.</param>
            <param name="result">The location of intersection.</param>
            <returns>True if an intersection result occurs.
            The type of intersection should be checked in the intersection result. 
            False if no intersection occurs.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Ray,Elements.Geometry.Vector3@,System.Boolean)">
            <summary>
            Does this ray intersect the provided ray?
            </summary>
            <param name="ray">The ray to intersect.</param>
            <param name="result">The location of intersection.</param>
            <param name="ignoreRayDirection">If true, the direction of the rays will be ignored</param>
            <returns>True if the rays intersect, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Intersects(Elements.Geometry.Line,Elements.Geometry.Vector3@)">
            <summary>
            Does this ray intersect the provided line?
            </summary>
            <param name="line">The line to intersect.</param>
            <param name="result">The location of intersection.</param>
            <returns>True if the rays intersect, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Ray.Equals(Elements.Geometry.Ray)">
            <summary>
            Is this ray equal to the provided ray?
            </summary>
            <param name="other">The ray to test.</param>
            <returns>Returns true if the two rays are equal, otherwise false.</returns>
        </member>
        <member name="T:Elements.Geometry.Vector3Extensions">
            <summary>
            Extension methods for Vector3.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Are the provided points on the same plane?
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.AreCollinear(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Are the provided points along the same line?
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.ToTransform(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Compute a transform with the origin at points[0], with
            an X axis along points[1]->points[0], and a normal
            computed using the vectors points[2]->points[1] and
            points[1]->points[0].
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Find the average of a collection of Vector3.
            </summary>
            <param name="points">The Vector3 collection to average.</param>
            <returns>A Vector3 representing the average.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[],System.Double)">
            <summary>
            Shrink a collection of Vector3 towards their average.
            </summary>
            <param name="points">The collection of Vector3 to shrink.</param>
            <param name="distance">The distance to shrink along the vector to average.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Convert a collection of Vector3 to a flat array of double.
            </summary>
            <param name="points">The collection of Vector3 to convert.</param>
            <returns>An array containing x,y,z,x1,y1,z1,x2,y2,z2,...</returns>
        </member>
        <member name="T:Elements.Material">
            <summary>A material.</summary>
            <summary>
            A material with red, green, blue, alpha, and metallic factor components.
            </summary>
        </member>
        <member name="P:Elements.Material.Color">
            <summary>The material's color.</summary>
        </member>
        <member name="P:Elements.Material.SpecularFactor">
            <summary>The specular factor between 0.0 and 1.0.</summary>
        </member>
        <member name="P:Elements.Material.GlossinessFactor">
            <summary>The glossiness factor between 0.0 and 1.0.</summary>
        </member>
        <member name="P:Elements.Material.Unlit">
            <summary>Is this material affected by lights?</summary>
        </member>
        <member name="P:Elements.Material.Texture">
            <summary>A relative file path to an image file to be used as a texture.</summary>
        </member>
        <member name="P:Elements.Material.DoubleSided">
            <summary>Is this material to be rendered from both sides?</summary>
        </member>
        <member name="M:Elements.Material.#ctor(System.String,System.Guid)">
            <summary>
            Construct a material.
            </summary>
            <param name="name">The name of the material.</param>
            <param name="id">The id of the material.</param>
        </member>
        <member name="M:Elements.Material.#ctor(System.String,Elements.Geometry.Color,System.Double,System.Double,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Construct a material.
            </summary>
            <param name="name">The identifier of the material. Identifiers should be unique within a model.</param>
            <param name="color">The RGBA color of the material.</param>
            <param name="specularFactor">The specular component of the color. Between 0.0 and 1.0.</param>
            <param name="glossinessFactor">The glossiness component of the color. Between 0.0 and 1.0.</param>
            <param name="texture">A relative path to a jpg or png image file to be used as a texture.</param>
            <param name="unlit">Is this material affected by lights?</param>
            <param name="doubleSided">Is this material to be rendered from both sides?</param>
            <param name="id">The id of the material.</param>
            <exception>Thrown when the specular or glossiness value is less than 0.0.</exception>
            <exception>Thrown when the specular or glossiness value is greater than 1.0.</exception>
        </member>
        <member name="M:Elements.Material.Equals(System.Object)">
            <summary>
            Is this material equal to the provided material?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.Material.GetHashCode">
            <summary>
            Get the hash code for the material.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Model">
            <summary>A container of elements.</summary>
            <summary>
            A container for elements.
            </summary>
        </member>
        <member name="P:Elements.Model.Origin">
            <summary>The origin of the model.</summary>
        </member>
        <member name="P:Elements.Model.Transform">
            <summary>The transform of the model.</summary>
        </member>
        <member name="P:Elements.Model.Elements">
            <summary>A collection of Elements keyed by their identifiers.</summary>
        </member>
        <member name="M:Elements.Model.#ctor">
            <summary>
            Construct an empty model.
            </summary>
        </member>
        <member name="M:Elements.Model.#ctor(Elements.Geometry.Transform,System.Collections.Generic.IDictionary{System.Guid,Elements.Element})">
            <summary>
            Construct a model.
            </summary>
            <param name="transform">The model's transform.</param>
            <param name="elements">The model's elements.</param>
        </member>
        <member name="M:Elements.Model.AddElement(Elements.Element,System.Boolean)">
            <summary>
            Add an element to the model.
            This operation recursively searches the element's properties
            for element sub-properties and adds those elements to the elements
            dictionary before adding the element itself.
            </summary>
            <param name="element">The element to add to the model.</param>
            <param name="gatherSubElements">Should sub-elements in properties be
            added to the model's elements collection?</param>
        </member>
        <member name="M:Elements.Model.AddElements(System.Collections.Generic.IEnumerable{Elements.Element},System.Boolean)">
            <summary>
            Add a collection of elements to the model.
            </summary>
            <param name="elements">The elements to add to the model.</param>
            <param name="gatherSubElements">Should sub-elements in properties be
            added to the model's elements collection?</param>
        </member>
        <member name="M:Elements.Model.AddElements(Elements.Element[])">
            <summary>
            Add elements to the model.
            </summary>
            <param name="elements">The elements to add to the model.</param>
        </member>
        <member name="M:Elements.Model.GetElementOfType``1(System.Guid)">
            <summary>
            Get an entity by id from the Model.
            </summary>
            <param name="id">The identifier of the element.</param>
            <returns>An entity or null if no entity can be found
            with the provided id.</returns>
        </member>
        <member name="M:Elements.Model.GetElementByName``1(System.String)">
            <summary>
            Get the first entity with the specified name.
            </summary>
            <param name="name"></param>
            <returns>An entity or null if no entity can be found
            with the provided name.</returns>
        </member>
        <member name="M:Elements.Model.AllElementsOfType``1">
            <summary>
            Get all entities of the specified Type.
            </summary>
            <typeparam name="T">The Type of element to return.</typeparam>
            <returns>A collection of elements of the specified type.</returns>
        </member>
        <member name="M:Elements.Model.ToJson(System.Boolean)">
            <summary>
            Serialize the model to JSON.
            </summary>
        </member>
        <member name="M:Elements.Model.FromJson(System.String,System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            Deserialize a model from JSON.
            </summary>
            <param name="json">The JSON representing the model.</param>
            <param name="errors">A collection of deserialization errors.</param>
            <param name="forceTypeReload">Option to force reloading the inernal type cache. Use if you add types dynamically in your code.</param>
        </member>
        <member name="T:Elements.WallByProfile">
            <summary>A wall drawn using the elevation profile</summary>
        </member>
        <member name="P:Elements.WallByProfile.Profile">
            <summary>The profile, which includes openings that will be extruded.</summary>
        </member>
        <member name="P:Elements.WallByProfile.Thickness">
            <summary>The overall thickness of the wall</summary>
        </member>
        <member name="P:Elements.WallByProfile.Centerline">
            <summary>The Centerline of the wall</summary>
        </member>
        <member name="M:Elements.WallByProfile.#ctor(Elements.Geometry.Profile,System.Double,Elements.Geometry.Line,Elements.Geometry.Transform,Elements.Material,Elements.Geometry.Representation,System.Boolean)">
            <summary>
            Create a wall requiring only the profile, thickness and centerline.
            </summary>
        </member>
        <member name="M:Elements.WallByProfile.UpdateRepresentations">
            <summary>Update the geometric representation of this wall.</summary>
        </member>
        <member name="T:Elements.ImportMeshElement">
            <summary>
            An element definition whose representation is provided by an imported mesh like an STL.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ImportMeshElementTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.ImportMeshElement.Path">
            <summary>
            The path to the element's mesh on disk.
            </summary>
        </member>
        <member name="M:Elements.ImportMeshElement.#ctor(System.String,Elements.Units.LengthUnit,Elements.Material,System.Guid,System.String)">
            <summary>
            Construct an import mesh element.
            </summary>
            <param name="path">The path to the element's mesh on disk.</param>
            <param name="lengthUnit">The length unit used in the provided mesh.</param>
            <param name="material">The element's material.</param>
            <param name="id">The element's id.</param>
            <param name="name">The element's name.</param>
        </member>
        <member name="P:Elements.Interfaces.IHasOpenings.Openings">
            <summary>
            A collection of openings.
            </summary>
        </member>
        <member name="T:Elements.LightType">
            <summary>
            A light type.
            </summary>
        </member>
        <member name="F:Elements.LightType.Directional">
            <summary>
            A directional light.
            </summary>
        </member>
        <member name="F:Elements.LightType.Point">
            <summary>
            A point light.
            </summary>
        </member>
        <member name="F:Elements.LightType.Spot">
            <summary>
            A spot light.
            </summary>
        </member>
        <member name="F:Elements.LightType.Undefined">
            <summary>
            An undefined light type.
            </summary>
        </member>
        <member name="T:Elements.Light">
            <summary>
            Base class for all lights.
            </summary>
        </member>
        <member name="P:Elements.Light.LightType">
            <summary>
            The type of the light.
            </summary>
        </member>
        <member name="P:Elements.Light.Intensity">
            <summary>
            The intensity of the light measured in lux.
            </summary>
        </member>
        <member name="P:Elements.Light.Color">
            <summary>
            The color of the light.
            The color's alpha value will be ignored.
            </summary>
        </member>
        <member name="P:Elements.Light.Transform">
            <summary>
            The light's transform.
            The light will be aimed along the transform's -Z axis.
            </summary>
        </member>
        <member name="M:Elements.Light.#ctor(System.Double,Elements.Geometry.Color,Elements.Geometry.Transform,System.Guid,System.String)">
            <summary>
            Construct a light.
            </summary>
            <param name="intensity">The intensity of the light.</param>
            <param name="color">The color of the light.</param>
            <param name="transform">The transform of the light.</param>
            <param name="id">The unique identifier of the light.</param>
            <param name="name">The name of the light.</param>
        </member>
        <member name="T:Elements.Mass">
            <summary>
            An extruded volume.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/MassTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Mass.Profile">
            <summary>
            The profile of the mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.Height">
            <summary>
            The height of the mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.Thickness">
            <summary>
            The thickness of the mass' extrusion.
            </summary>
        </member>
        <member name="M:Elements.Mass.#ctor(Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a Mass.
            </summary>
            <param name="profile">The profile of the mass.</param>
            <param name="height">The height of the mass from the bottom elevation.</param>
            <param name="material">The mass' material. The default is the built in mass material.</param>
            <param name="transform">The mass' transform.</param>
            <param name="representation">The mass' representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the mass.</param>
            <param name="name">The name of the mass.</param>
        </member>
        <member name="M:Elements.Mass.Volume">
            <summary>
            The volume of the mass.
            </summary>
        </member>
        <member name="M:Elements.Mass.ProfileTransformed">
            <summary>
            Get the profile of the mass transformed by the mass' transform.
            </summary>
        </member>
        <member name="M:Elements.Mass.UpdateRepresentations">
            <summary>
            Update the representations.
            </summary>
        </member>
        <member name="T:Elements.Domain1d">
            <summary>
            A 1 dimensional interval or domain.
            </summary>
        </member>
        <member name="M:Elements.Domain1d.Includes(System.Double)">
            <summary>
            Returns true if pos is within the domain (exclusive of its ends)
            </summary>
            <param name="value">The value to test</param>
            <returns>True if the value is within the domain</returns>
        </member>
        <member name="P:Elements.Domain1d.Min">
            <summary>
            The lower bound of the domain
            </summary>
        </member>
        <member name="P:Elements.Domain1d.Max">
            <summary>
            The upper bound of the domain
            </summary>
        </member>
        <member name="P:Elements.Domain1d.Length">
            <summary>
            The length of the domain — Max-Min. Note that for non-increasing
            domains this value can be negative.
            </summary>
        </member>
        <member name="M:Elements.Domain1d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a 1D Domain
            </summary>
            <param name="min">The lower bound of the domain.</param>
            <param name="max">The upper bound of the domain.</param>
        </member>
        <member name="M:Elements.Domain1d.ToString">
            <summary>
            Convert to string of the form "From Min to Max"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Domain1d.SplitAt(System.Double)">
            <summary>
            Split domain into two at a position within its extents. Positions at the domain's ends will be rejected.
            </summary>
            <param name="position">The position value at which to split the domain.</param>
            <returns>An array of 2 1d domains split at the designated position.</returns>
        </member>
        <member name="M:Elements.Domain1d.IsCloseToBoundary(System.Double)">
            <summary>
            Test if a position is within global tolerance of the domain boundary.
            </summary>
            <param name="position">The position to test.</param>
            <returns>True if the position is within tolerance of the domain Min or Max.</returns>
        </member>
        <member name="M:Elements.Domain1d.DivideByCount(System.Int32)">
            <summary>
            Split a domain evenly into N subdomains.
            </summary>
            <param name="n">The number of domains</param>
            <returns>An array of N equally-sized subdomains.</returns>
        </member>
        <member name="T:Elements.DomainExtensions">
            <summary>
            Extension and utility methods for mathematical operations. 
            </summary>
        </member>
        <member name="M:Elements.DomainExtensions.MapBetweenDomains(System.Double,Elements.Domain1d,Elements.Domain1d)">
            <summary>
            Map/Scale a value from one domain to another. 3 mapped from (2,4) to (10, 20) would be 15.
            </summary>
            <param name="value">The value to map.</param>
            <param name="source">The source domain to map from.</param>
            <param name="target">The target domain to map to.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.DomainExtensions.MapFromDomain(System.Double,Elements.Domain1d)">
            <summary>
            Map/Normalize a value from a domain to the domain (0,1).
            </summary>
            <param name="value">The value to map</param>
            <param name="domain">The domain to map from.</param>
            <returns>(value - domain.Min) / domain.Length</returns>
        </member>
        <member name="M:Elements.DomainExtensions.MapToDomain(System.Double,Elements.Domain1d)">
            <summary>
            Map/scale a value between 0-1 to a target domain. Will not reject values outside 0-1. 
            </summary>
            <param name="value">The value to map.</param>
            <param name="domain">The domain to map to.</param>
            <returns>value * domain.Length + domain.Min</returns>
        </member>
        <member name="M:Elements.DomainExtensions.ApproximatelyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Test if two values are approximately equal to each other with an optional tolerance value.
            </summary>
            <param name="value">The first value to test.</param>
            <param name="other">The other value to test.</param>
            <param name="tolerance">The threshold for equality. If not supplied, the global tolerance will be used.</param>
            <returns>True if |other - value| &lt; tolerance</returns>
        </member>
        <member name="T:Elements.MeshElement">
            <summary>
            An element whose representation is provided by a mesh.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/MeshElementTests.cs?name=example)]
            </example>
        </member>
        <member name="F:Elements.MeshElement._mesh">
            <summary>
            The mesh.
            </summary>
        </member>
        <member name="P:Elements.MeshElement.Mesh">
            <summary>
            The element's mesh.
            </summary>
        </member>
        <member name="M:Elements.MeshElement.#ctor(Elements.Geometry.Mesh,Elements.Material,Elements.Geometry.Transform,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct an import mesh element.
            </summary>
            <param name="mesh">The element's mesh.</param>
            <param name="material">The element's material.</param>
            <param name="transform">The element's transform.</param>
            <param name="isElementDefinition">Is this element a definition?</param>
            <param name="id">The element's id.</param>
            <param name="name">The element's name.</param>
        </member>
        <member name="M:Elements.MeshElement.Tessellate(Elements.Geometry.Mesh@,Elements.Geometry.Transform,Elements.Geometry.Color)">
            <summary>
            Tessellate the element.
            </summary>
            <param name="mesh"></param>
            <param name="transform"></param>
            <param name="color"></param>
        </member>
        <member name="T:Elements.ModelCurve">
            <summary>
            A curve which is visible in 3D.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ModelCurveTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.ModelCurve.Curve">
            <summary>
            The curve.
            </summary>
        </member>
        <member name="M:Elements.ModelCurve.#ctor(Elements.Geometry.Curve,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Create a model curve.
            </summary>
            <param name="curve">The curve.</param>
            <param name="material">The material. Specular and glossiness components will be ignored.</param>
            <param name="transform">The model curve's transform.</param>
            <param name="representation">The curve's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the model curve.</param>
            <param name="name">The name of the model curve.</param>
        </member>
        <member name="T:Elements.ModelCurveExtensions">
            <summary>
            Extension methods for model curves.
            </summary>
        </member>
        <member name="M:Elements.ModelCurveExtensions.ToModelCurves(Elements.Geometry.Transform,Elements.Geometry.Transform)">
            <summary>
            Convert a transform to a set of model curves.
            </summary>
            <param name="t">The transform to convert.</param>
            <param name="context">An optional transform in which these curves should be drawn.</param>
        </member>
        <member name="M:Elements.ModelCurveExtensions.ToModelCurves(Elements.Geometry.BBox3,Elements.Geometry.Transform,Elements.Material)">
            <summary>
            Convert a Bounding Box to a set of model curves.
            </summary>
            <param name="box">The bounding box to convert.</param>
            <param name="context">An optional transform in which these curves should be drawn.</param>
            <param name="material">An optional material to use for these curves.</param>
        </member>
        <member name="M:Elements.ModelCurveExtensions.ToModelCurves(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Material)">
            <summary>
            Convert a profile to a set of model curves.
            </summary>
            <param name="p">The profile to convert.</param>
            <param name="context">An optional transform in which these curves should be drawn.</param>
            <param name="material">An optional material to use for these curves.</param>
        </member>
        <member name="T:Elements.ModelPoints">
            <summary>
            A collection of points which are visible in 3D.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/ModelPointsTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.ModelPoints.Locations">
            <summary>
            The locations of the points.
            </summary>
        </member>
        <member name="M:Elements.ModelPoints.#ctor(System.Collections.Generic.IList{Elements.Geometry.Vector3},Elements.Material,Elements.Geometry.Transform,System.Boolean,System.Guid,System.String)">
            <summary>
            Create a collection of points.
            </summary>
            <param name="locations">The locations of the points.</param>
            <param name="material">The material. Specular and glossiness components will be ignored.</param>
            <param name="transform">The model curve's transform.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the model curve.</param>
            <param name="name">The name of the model curve.</param>
        </member>
        <member name="T:Elements.Opening">
            <summary>
            A polygonal opening.
            An opening's placement is defined by the x and y coordinates.
            The direction of the opening corresponds to the +Z axis of the transform.
            </summary>
        </member>
        <member name="P:Elements.Opening.Profile">
            <summary>
            The profile of the opening.
            </summary>
        </member>
        <member name="P:Elements.Opening.Perimeter">
            <summary>
            The perimeter of the opening.
            </summary>
        </member>
        <member name="P:Elements.Opening.DepthFront">
            <summary>
            The depth of the opening along the opening's +Z axis.
            </summary>
        </member>
        <member name="P:Elements.Opening.DepthBack">
            <summary>
            The depth of the opening along the opening's -Z axis.
            </summary>
        </member>
        <member name="M:Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Create an opening.
            </summary>
        </member>
        <member name="M:Elements.Opening.UpdateRepresentations">
            <summary>
            Update representations
            </summary>
        </member>
        <member name="T:Elements.Panel">
            <summary>
            A zero-thickness planar element defined by a perimeter.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/PanelTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Panel.Perimeter">
            <summary>
            The perimeter of the panel.
            </summary>
        </member>
        <member name="M:Elements.Panel.#ctor(Elements.Geometry.Polygon,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Create a panel.
            </summary>
            <param name="perimeter">The perimeter of the panel.</param>
            <param name="material">The panel's material</param>
            <param name="transform">The panel's transform.</param>
            <param name="representation">The panel's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the panel.</param>
            <param name="name">The name of the panel.</param>
            <exception>Thrown when the provided perimeter points are not coplanar.</exception>
        </member>
        <member name="M:Elements.Panel.Area">
            <summary>
            The panel's area.
            </summary>
        </member>
        <member name="M:Elements.Panel.Normal">
            <summary>
            The normal of the panel, defined using the first 3 vertices in the location.
            </summary>
            <returns>The normal vector of the panel.</returns>
        </member>
        <member name="M:Elements.Panel.UpdateRepresentations">
            <summary>
            Update representations.
            </summary>
        </member>
        <member name="T:Elements.PointLight">
            <summary>
            A point light.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/LightTests.cs?name=point_example)]
            </example>
        </member>
        <member name="M:Elements.PointLight.#ctor(Elements.Geometry.Color,Elements.Geometry.Transform,System.Double,System.Guid,System.String)">
            <summary>
            A point light.
            </summary>
            <param name="intensity">The light's intensity measured in candela.</param>
            <param name="color">The light's color.</param>
            <param name="transform">The light's transform.</param>
            <param name="id">The light's unique id.</param>
            <param name="name">The light's name.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.RandomExtensions">
            <summary>
            Extension methods for generating new random objects from an instance of System.Random.
            </summary>
        </member>
        <member name="M:Elements.RandomExtensions.NextColor(System.Random)">
            <summary>
            Generate a new color with a random R, G, and B component. Useful for debugging purposes.
            </summary>
            <param name="random">The `Random` object to generate from</param>
        </member>
        <member name="M:Elements.RandomExtensions.NextMaterial(System.Random,System.Boolean)">
            <summary>
            Generate a new material with a random color assigned. Useful for debugging purposes.
            </summary>
            <param name="random">The `Random` object to generate from</param>
            <param name="unlit">Whether or not to treat the material as unlit.</param>
        </member>
        <member name="T:Elements.Serialization.glTF.GltfBufferExtensions">
            <summary>
            Extensions for glTF serialization.
            </summary>
        </member>
        <member name="T:Elements.Serialization.glTF.GltfExtensions">
            <summary>
            Extensions for glTF serialization.
            </summary>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.ToGlTF(Elements.Model,System.String,System.Boolean,System.Boolean)">
            <summary>
            Serialize the model to a gltf file on disk.
            If there is no geometry, an empty GLTF will still be produced.
            </summary>
            <param name="model">The model to serialize.</param>
            <param name="path">The output path.</param>
            <param name="useBinarySerialization">Should binary serialization be used?</param>
            <param name="drawEdges">Should the solid edges be written to the gltf?</param>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.ToGlTF(Elements.Model)">
            <summary>
            Serialize the model to a byte array.
            </summary>
            <param name="model">The model to serialize.</param>
            <returns>A byte array representing the model.</returns>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.ToBase64String(Elements.Model,System.Boolean)">
            <summary>
            Serialize the model to a base64 encoded string.
            </summary>
            <returns>A Base64 string representing the model.</returns>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.SaveGlb(Elements.Model,System.String,System.Boolean)">
            <returns>Whether a Glb was successfully saved. False indicates that there was no geometry to save.</returns>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.SaveGltf(Elements.Model,System.String,System.Boolean)">
            <returns>Whether a Glb was successfully saved. False indicates that there was no geometry to save.</returns>
        </member>
        <member name="M:Elements.Serialization.glTF.GltfExtensions.ProcessGeometricRepresentation(Elements.Element,glTFLoader.Schema.Gltf@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.List{System.Byte}@,System.Collections.Generic.List{glTFLoader.Schema.BufferView},System.Collections.Generic.List{glTFLoader.Schema.Accessor},System.Collections.Generic.List{glTFLoader.Schema.Mesh},System.Collections.Generic.List{glTFLoader.Schema.Node},System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.List{Elements.Geometry.Vector3},System.Boolean,System.String,System.Int32@,Elements.GeometricElement)">
            <summary>
            Returns the index of the mesh created while processing the Geometry.
            </summary>
        </member>
        <member name="M:Elements.Serialization.JSON.JsonInheritanceConverter.BuildAppDomainTypeCache(System.Collections.Generic.List{System.String}@)">
            <summary>
            The type cache needs to contains all types that will have a discriminator.
            This includes base types, like elements, and all derived types like Wall.
            We use reflection to find all public types available in the app domain
            that have a Newtonsoft.Json.JsonConverterAttribute whose converter type is the
            Elements.Serialization.JSON.JsonInheritanceConverter.
            </summary>
            <returns>A dictionary containing all found types keyed by their full name.</returns>
        </member>
        <member name="M:Elements.Serialization.JSON.JsonInheritanceConverter.RefreshAppDomainTypeCache(System.Collections.Generic.List{System.String}@)">
            <summary>
            Call this method after assemblies have been loaded into the app
            domain to ensure that the converter's cache is up to date.
            </summary>
        </member>
        <member name="T:Elements.Serialization.JSON.MeshConverter">
            <summary>
            Triangle converter.
            </summary>
        </member>
        <member name="T:Elements.Serialization.JSON.SolidConverter">
            <summary>
            The SolidConverter is used to serialize and deserialize a Solid.
            Solids have a self-referencing structure which does not serialize
            effectively using the default serialization logic. The SolidConverter
            serializes and deserializes starting at the Solid's Faces, using
            Vertex and Edge ids to reconstruct and link the Edges and Vertices as necessary.
            </summary>
        </member>
        <member name="T:Elements.Space">
            <summary>
            An extruded region of occupiable space.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/SpaceTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Space.Profile">
            <summary>
            The profile of the space.
            </summary>
        </member>
        <member name="P:Elements.Space.Height">
            <summary>
            The space's height.
            </summary>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a space.
            </summary>
            <param name="profile">The profile of the space.</param>
            <param name="height">The height of the space.</param>
            <param name="material">The space's material.</param>
            <param name="transform">The space's transform.</param>
            <param name="representation">The space's represenation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the space.</param>
            <param name="name">The name of the space.</param>
            <exception>Thrown when the height is less than or equal to 0.0.</exception>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Solids.Solid,Elements.Geometry.Transform,Elements.Material,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a space from a solid.
            </summary>
            <param name="geometry">The solid which will be used to define the space.</param>
            <param name="transform">The transform of the space.</param>
            <param name="material">The space's material.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the space.</param>
            <param name="name">The name of the space.</param>
        </member>
        <member name="M:Elements.Space.ProfileTransformed">
            <summary>
            Get the profile of the space transformed by the space's transform.
            </summary>
        </member>
        <member name="M:Elements.Space.Area">
            <summary>
            The spaces's area.
            </summary>
        </member>
        <member name="M:Elements.Space.Volume">
            <summary>
            The spaces's volume.
            </summary>
        </member>
        <member name="M:Elements.Space.UpdateRepresentations">
            <summary>
            Update representations.
            </summary>
        </member>
        <member name="T:Elements.Spatial.Grid1d">
            <summary>
            Represents a "1-dimensional grid", akin to a number line that can be subdivided.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/Grid1dTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Spatial.Grid1d.Type">
            <summary>
            An optional type designation for this cell.  
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid1d.Cells">
            <summary>
            Child cells of this Grid. If null, this Grid is a complete cell with no subdivisions.
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid1d.Domain">
            <summary>
            Numerical domain of this Grid
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid1d.Curve">
            <summary>
            The base curve at the top level of this grid.
            </summary>
            <value></value>
        </member>
        <member name="P:Elements.Spatial.Grid1d.IsSingleCell">
            <summary>
            Returns true if this 1D Grid has no subdivisions / sub-grids. 
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(System.Collections.Generic.List{Elements.Spatial.Grid1d},System.String,Elements.Domain1d,Elements.Geometry.Curve,Elements.Domain1d)">
            <summary>
            Do not use this constructor — it is only for serialization purposes.
            </summary>
            <param name="cells"></param>
            <param name="type"></param>
            <param name="domain"></param>
            <param name="topLevelParentCurve"></param>
            <param name="curveDomain"></param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(System.Double)">
            <summary>
            Default constructor with optional length parameter
            </summary>
            <param name="length">Length of the grid domain</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(Elements.Spatial.Grid1d)">
            <summary>
            Construct a 1D Grid from another 1D Grid
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(Elements.Domain1d)">
            <summary>
            Construct a 1D grid from a numerical domain. The geometry will be assumed to lie along the X axis.
            </summary>
            <param name="domain">The 1-dimensional domain for the grid extents.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(Elements.Geometry.Curve)">
            <summary>
            Construct a 1D grid from a curve.
            </summary>
            <param name="curve">The curve from which to generate the grid.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.#ctor(Elements.Spatial.Grid1d,Elements.Domain1d,Elements.Domain1d)">
            <summary>
            This constructor is only for internal use by subdivision / split methods. 
            </summary>
            <param name="topLevelParent">The top level grid1d, containing the base curve</param>
            <param name="domain">The domain of the new subdivided segment</param>
            <param name="curveDomain">The entire domain of the parent grid's curve</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtParameter(System.Double)">
            <summary>
            Split the grid at a normalized parameter from 0 to 1 along its domain. 
            </summary>
            <param name="t">The parameter at which to split.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtParameters(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Split the grid at a list of normalized parameters from 0 to 1 along its domain.
            </summary>
            <param name="parameters">A list of parameters at which to split the grid.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtPosition(System.Double)">
            <summary>
            Split the grid at a fixed position from the start or end
            </summary>
            <param name="position">The length along the grid at which to split.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtOffset(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Split a cell at a relative position measured from its domain start or end. 
            </summary>
            <param name="position">The relative position at which to split.</param>
            <param name="fromEnd">If true, measure the position from the end rather than the start</param>
            <param name="ignoreOutsideDomain">If true, splits at offsets outside the domain will be silently ignored.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.InternalSplitAtOffset(System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This private method is called by public SplitAtOffset, as well as by SplitAtPoint, which calculates its position relative to the 
            overall curve domain, rather than relative to the grid's own (possibly different) subdomain.
            </summary>
            <param name="position">The relative position at which to split.</param>
            <param name="fromEnd">If true, measure the position from the end rather than the start</param>
            <param name="ignoreOutsideDomain">If true, splits at offsets outside the domain will be silently ignored.</param>
            <param name="useCurveDomain">If true, the position is measured relative to the top-level curve domain, not the subdomain. </param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtOffsets(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Split a cell at a list of relative positions measured from its domain start or end. 
            </summary>
            <param name="positions">The relative positions at which to split.</param>
            <param name="fromEnd">If true, measure the position from the end rather than the start</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtPositions(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Split the grid at a list of fixed positions from the start or end
            </summary>
            <param name="positions">The lengths along the grid at which to split.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtPoint(Elements.Geometry.Vector3)">
            <summary>
            Split the grid at a point in world space. Note that for curved grids an approximate
            point will be used.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.ClosestPosition(Elements.Geometry.Vector3)">
            <summary>
            Get the position along the grid's domain closest to a supplied point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.SplitAtPoints(System.Collections.Generic.IEnumerable{Elements.Geometry.Vector3})">
            <summary>
            Split the grid at points in world space. Note that for curved grids an approximate
            point will be used.
            </summary>
            <param name="points">The points at which to split.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByCount(System.Int32)">
            <summary>
            Divide the grid into N even subdivisions. Grids that are already subdivided will fail. 
            </summary>
            <param name="n">Number of subdivisions</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByApproximateLength(System.Double,Elements.Spatial.EvenDivisionMode)">
            <summary>
            Divide a grid by an approximate length. The length will be adjusted to generate whole-number
            subdivisions, governed by an optional DivisionMode.
            </summary>
            <param name="targetLength">The approximate length by which to divide the grid.</param>
            <param name="divisionMode">Whether to permit any size cell, or only larger or smaller cells by rounding up or down.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByFixedLengthFromPoint(System.Double,Elements.Geometry.Vector3)">
            <summary>
            Divide a grid by constant length subdivisions, starting from a point location. 
            </summary>
            <param name="length">The length of subdivisions</param>
            <param name="point">The point at which to begin subdividing.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByFixedLengthFromPosition(System.Double,System.Double)">
            <summary>
            Divide a grid by constant length subdivisions, starting from a position. 
            </summary>
            <param name="length">The length of subdivisions</param>
            <param name="position">The position along the domain at which to begin subdividing.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByFixedLength(System.Double,Elements.Spatial.FixedDivisionMode,System.Int32)">
            <summary>
            Divide a grid by constant length subdivisions, with a variable division mode to control how leftover
            space is handled. 
            </summary>
            <param name="length">The division length</param>
            <param name="divisionMode">How to handle leftover / partial remainder panels </param>
            <param name="sacrificialPanels">How many full length panels to sacrifice to make remainder panels longer.</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByPattern(System.Collections.Generic.IList{System.Double},Elements.Spatial.PatternMode,Elements.Spatial.FixedDivisionMode)">
            <summary>
            Divide a grid by a pattern of lengths. Type names will be automatically generated, repetition will be governed by PatternMode,
            and remainder handling will be governed by DivisionMode. 
            </summary>
            <param name="lengthPattern">A pattern of lengths to apply to the grid</param>
            <param name="patternMode">How to apply/repeat the pattern</param>
            <param name="divisionMode">How to handle leftover/remainder length</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideByPattern(System.Collections.Generic.IList{System.ValueTuple{System.String,System.Double}},Elements.Spatial.PatternMode,Elements.Spatial.FixedDivisionMode)">
            <summary>
            Divide a grid by a pattern of named lengths. Repetition will be governed by PatternMode,
            and remainder handling will be governed by DivisionMode. 
            </summary>
            <param name="lengthPattern">A pattern of lengths to apply to the grid</param>
            <param name="patternMode">How to apply/repeat the pattern</param>
            <param name="divisionMode">How to handle leftover/remainder length</param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.DivideWithPatternAndOffset(System.Collections.Generic.IList{System.ValueTuple{System.String,System.Double}},System.Double)">
            <summary>
            Divide by a list of named lengths and an offset from start, used by the DivideByPattern function.
            </summary>
            <param name="patternSegments"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Elements.Spatial.Grid1d.Cycle(System.Collections.Generic.IList{System.ValueTuple{System.String,System.Double}},System.Collections.Generic.IList{System.ValueTuple{System.String,System.Double}})">
            <summary>
            Populate a list of pattern segments by repeating a pattern up to the length of the grid domain. 
            </summary>
            <param name="lengthPattern"></param>
            <param name="patternSegments"></param>
        </member>
        <member name="P:Elements.Spatial.Grid1d.Item(System.Int32)">
            <summary>
            Retrieve a cell by index
            </summary>
            <param name="i">The index</param>
            <returns>A Grid1d representing the selected cell/segment.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.FindCellAtPosition(System.Double)">
            <summary>
            Retrieve the grid cell (as a Grid1d) at a length along the domain. 
            </summary>
            <param name="pos">The position in the grid's domain to find</param>
            <returns>The cell at this position, if found, or this grid if it is a single cell.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.FindCellIndexAtPosition(System.Double)">
            <summary>
            Retrieve the index of the grid cell at a length along the domain. If
            position is exactly on the edge, it returns the righthand cell index.
            </summary>
            <param name="position"></param>
            <returns>Returns the index of the first cell. </returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.GetCellSeparators(System.Boolean)">
            <summary>
            Get the points at the ends and in-between all cells. 
            </summary>
            <param name="recursive">If true, separators will be retrieved from child cells as well.</param>
            <returns>A list of Vector3d points representing the boundaries between cells.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.GetCells">
            <summary>
            Retrieve all grid segment cells recursively.
            For just top-level cells, get the Cells property.
            </summary>
            <returns>A list of all the bottom-level cells / child cells of this grid.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.GetCellGeometry">
            <summary>
            Retrieve geometric representation of a cell (currently just a line)
            </summary>
            <returns>A curve representing the extents of this grid / cell.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid1d.PositionIsAtCellEdge(System.Double)">
            <summary>
            Test if a given position lies nearly on the edge of a cell
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:Elements.Spatial.PatternMode">
            <summary>
            Methods for repeating a pattern of lengths or types
            </summary>
        </member>
        <member name="F:Elements.Spatial.PatternMode.None">
            <summary>
            No Repeat. For a pattern [A, B, C], split A, B, C panels, and treat the remaining length according to FixedDivisionMode settings.
            </summary>
        </member>
        <member name="F:Elements.Spatial.PatternMode.Cycle">
            <summary>
            For a pattern [A, B, C], split at A, B, C, A, B, C, A...
            </summary>
        </member>
        <member name="F:Elements.Spatial.PatternMode.Flip">
            <summary>
            For a pattern [A, B, C], split at A, B, C, B, A, B, C, B, A
            </summary>
        </member>
        <member name="T:Elements.Spatial.EvenDivisionMode">
            <summary>
            Describe how a target length should be treated 
            </summary>
        </member>
        <member name="F:Elements.Spatial.EvenDivisionMode.Nearest">
            <summary>
            Closest match for a target length, can be greater or smaller in practice. 
            </summary>
        </member>
        <member name="F:Elements.Spatial.EvenDivisionMode.RoundUp">
            <summary>
            Round up the count — Only divide into segments shorter than the target length
            </summary>
        </member>
        <member name="F:Elements.Spatial.EvenDivisionMode.RoundDown">
            <summary>
            Round down the count — Only divide into segments longer than the target length
            </summary>
        </member>
        <member name="T:Elements.Spatial.FixedDivisionMode">
            <summary>
            Different ways to handle the "remainder" when dividing an arbitrary length by a fixed size  
            </summary>
        </member>
        <member name="F:Elements.Spatial.FixedDivisionMode.RemainderAtBothEnds">
            <summary>
            Take the remainder and split it across both ends of the grid
            </summary>
        </member>
        <member name="F:Elements.Spatial.FixedDivisionMode.RemainderAtStart">
            <summary>
            Locate the remainder at the start of the grid
            </summary>
        </member>
        <member name="F:Elements.Spatial.FixedDivisionMode.RemainderAtEnd">
            <summary>
            Locate the remainder at the end of the grid
            </summary>
        </member>
        <member name="F:Elements.Spatial.FixedDivisionMode.RemainderNearMiddle">
            <summary>
            Locate the remainder at or near the middle of the grid.
            </summary>
        </member>
        <member name="T:Elements.Spatial.Grid2d">
            <summary>
            Represents a 2-dimensional grid which can be subdivided
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/Grid2dTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Spatial.Grid2d.IsSingleCell">
            <summary>
            Returns true if this 2D Grid has no subdivisions / sub-grids.
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.U">
            <summary>
            The 1d Grid along the U dimension
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.V">
            <summary>
            The 1d grid along the V dimension
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.Type">
            <summary>
            An optional type designation for this cell.
            </summary>
        </member>
        <member name="F:Elements.Spatial.Grid2d.fromGrid">
            <summary>
            A transform from grid space to world space
            </summary>
        </member>
        <member name="F:Elements.Spatial.Grid2d.toGrid">
            <summary>
            A transform from world space to grid space
            </summary>
        </member>
        <member name="F:Elements.Spatial.Grid2d.boundariesInGridSpace">
            <summary>
            Any boundary curves, transformed to grid space.
            </summary>
        </member>
        <member name="T:Elements.Spatial.Grid2d.IndexedCell">
            <summary>
            Represents a subcell at a position in a parent grid
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid2d.IndexedCell.#ctor(System.Int32,System.Int32,Elements.Spatial.Grid2d)">
            <summary>
            Make a new indexed cell
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="grid"></param>
        </member>
        <member name="P:Elements.Spatial.Grid2d.IndexedCell.I">
            <summary>
            The i Index
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.IndexedCell.J">
            <summary>
            The j Index
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.IndexedCell.Grid">
            <summary>
            The grid cell
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor">
            <summary>
            Construct a Grid2d with default domain (0,0) to (1,1)
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Geometry.Transform,Elements.Geometry.Transform,Elements.Domain1d,Elements.Domain1d,System.Collections.Generic.List{Elements.Geometry.Polygon},Elements.Spatial.Grid1d,Elements.Spatial.Grid1d,System.String,System.Collections.Generic.List{Elements.Spatial.Grid2d.IndexedCell})">
            <summary>
            Do not use this constructor — it is only for serialization purposes.
            </summary>
            <param name="fromGrid"></param>
            <param name="toGrid"></param>
            <param name="uDomainInternal"></param>
            <param name="vDomainInternal"></param>
            <param name="boundariesInGridSpace"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="type"></param>
            <param name="modifiedChildCells"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Spatial.Grid2d)">
            <summary>
            Construct a Grid2d from another Grid2d
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Spatial.Grid2d,Elements.Spatial.Grid1d,Elements.Spatial.Grid1d)">
            <summary>
            Construct a Grid2d using another Grid2d as the base, but with different Grid1ds as its axes.
            </summary>
            <param name="other">The Grid2d to base this one on.</param>
            <param name="u">The Grid1d representing the U Axis.</param>
            <param name="v">The Grid1d representing the V Axis.</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Spatial.Grid1d,Elements.Spatial.Grid1d)">
            <summary>
            Construct a Grid2d from two Grid1ds in the U and V directions
            </summary>
            <param name="u"></param>1
            <param name="v"></param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Domain1d,Elements.Domain1d)">
            <summary>
            Construct a 2d grid with two 1d domains
            </summary>
            <param name="uDomain">The domain along the U axis</param>
            <param name="vDomain">The domain along the V axis</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a Grid2d with specified dimensions for the U and V direction.
            </summary>
            <param name="uDimension">The size along the U axis</param>
            <param name="vDimension">The size along the V axis</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Transform)">
            <summary>
            Create a Grid2d from a polygon and optional Transform.
            If the plane is null or not supplied, the identity transform will be used for the grid origin and orientation.
            Currently only transforms parallel to the supplied polygons are supported.
            The polygon's bounding box parallel to the supplied transform will be
            used as the grid extents.
            </summary>
            <param name="boundary">The external boundary of this grid system.</param>
            <param name="transform">A transform representing the alignment of the grid.</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Geometry.Transform)">
            <summary>
            Create a Grid2d from a list of boundary polygons and an optional transform.
            If the transform is null or not supplied, a transform will be generated automatically from the boundaries' normal.
            Currently only transforms parallel to the supplied polygons are supported.
            The polygons' bounding box parallel to the supplied transform will be
            used as the grid extents.
            </summary>
            <param name="boundaries">The external boundaries of this grid system.</param>
            <param name="transform">A transform representing the alignment of the grid.</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a grid from a single boundary, an origin, and its U and V directions
            </summary>
            <param name="boundary"></param>
            <param name="origin"></param>
            <param name="uDirection"></param>
            <param name="vDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a grid from a list of boundaries, an origin, and its U and V directions
            </summary>
            <param name="boundaries"></param>
            <param name="origin"></param>
            <param name="uDirection"></param>
            <param name="vDirection"></param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(Elements.Geometry.Polygon,Elements.Spatial.Grid1d,Elements.Spatial.Grid1d)">
            <summary>
            Create a grid from a boundary and custom U and V grids
            </summary>
            <param name="boundary"></param>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon},Elements.Spatial.Grid1d,Elements.Spatial.Grid1d)">
            <summary>
            Create a grid from a list of boundaries and custom U and V grids
            </summary>
            <param name="boundaries"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SplitAtPoints(System.Collections.Generic.IEnumerable{Elements.Geometry.Vector3})">
            <summary>
            Split the grid at points in world space
            </summary>
            <param name="points">The points at which to split</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SplitAtPositions(System.Collections.Generic.IEnumerable{Elements.Geometry.Vector3})">
            <summary>
            Split the grid at positions in the grid's coordinate system
            </summary>
            <param name="positions">The positions at which to split, with X = U and Y = V. </param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SplitAtPoint(Elements.Geometry.Vector3)">
            <summary>
            Split the grid at a point in world space
            </summary>
            <param name="point">The point at which to split.</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SplitAtPosition(Elements.Geometry.Vector3)">
            <summary>
            Split the grid at a position in the grid's coordinate system
            </summary>
            <param name="position">The position at which to split, with X = U and Y = V.</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SplitAtPosition(System.Double,System.Double)">
            <summary>
            Split the grid at a position in the grid's coordinate system
            </summary>
            <param name="uPosition">The U position</param>
            <param name="vPosition">The V position</param>
        </member>
        <member name="M:Elements.Spatial.Grid2d.FindCellAtPosition(System.Double,System.Double)">
            <summary>
            Retrieve the grid cell (as a Grid1d) at a length along the U and V domains.
            </summary>
            <param name="uPosition">U Position</param>
            <param name="vPosition">V Position</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.FindCellIndexAtPosition(System.Double,System.Double)">
            <summary>
            Retrieve the U and V indices of a given cell at a position in grid space.
            This is used to map between position and indices.
            </summary>
            <param name="uPosition"></param>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetColumnAtIndex(System.Int32)">
            <summary>
            Get a list of all the top-level cells at a given u index.
            </summary>
            <param name="u">The u index</param>
            <returns>A list of the column of all cells with this u index.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetRowAtIndex(System.Int32)">
            <summary>
            Get a list of all the top-level cells at a given v index.
            </summary>
            <param name="v">The v index</param>
            <returns>A list of the row of all cells with this v index.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetCellAtIndices(System.Int32,System.Int32)">
            <summary>
            Retrieve a single top-level cell at the specified [u,v] indices.
            </summary>
            <param name="u">The U index</param>
            <param name="v">The V index</param>
            <returns>The cell at these indices</returns>
        </member>
        <member name="P:Elements.Spatial.Grid2d.Item(System.Int32,System.Int32)">
            <summary>
            Retrieve a single top-level cell at the specified [u,v] indices.
            </summary>
            <param name="u">The U index</param>
            <param name="v">The V index</param>
            <returns>The cell at these indices</returns>
        </member>
        <member name="P:Elements.Spatial.Grid2d.Cells">
            <summary>
            Child cells of this Grid. If null, this Grid is a complete cell with no subdivisions.
            </summary>
        </member>
        <member name="P:Elements.Spatial.Grid2d.CellsFlat">
            <summary>
            A flat list of all the top-level cells in this grid. To get child cells as well, use Grid2d.GetCells() instead.
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetCellNodes">
            <summary>
            Get the points at the corners of all grid cells.
            /// </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetCellSeparators(Elements.Spatial.GridDirection,System.Boolean)">
            <summary>
            Get the top-level lines separating cells from one another.
            </summary>
            <param name="direction">The grid direction in which you want to get separators. </param>
            <param name="trim">Whether or not to trim cell separators with the trimmed cell boundary</param>
            <returns>The lines between cells, running parallel to the grid direction selected. </returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetCells">
            <summary>
            Recursively retrieve all bottom-level cells from this grid.
            </summary>
            <returns>A list of all bottom-level cells in the grid.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetCellGeometry">
            <summary>
            Get a rectangular polygon representing this untrimmed cell boundary.
            </summary>
            <returns>A rectangle representing this cell in world coordinates.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetTrimmedCellGeometry">
            <summary>
            Get a list of polygons representing this cell boundary, trimmed by any polygon boundary.
            If the cell falls completely outside of the boundary, an empty array will be returned.
            </summary>
            <returns>Curves representing this cell in world coordinates.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.IsTrimmed">
            <summary>
            Test if the cell is trimmed by a boundary.
            </summary>
            <returns>True if the cell is trimmed by the grid boundary.</returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.TryInvalidateGrid">
            <summary>
            Invalidate the `Cells` property, used by child (axis) 1d grids to tell the parent that they've been updated.
            This sort of change is not allowed if the sub-cells already have been further subdivided, as regenerating them
            would wipe out these subcells, so in this case an error is thrown.
            </summary>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetBaseRectangle">
            <summary>
            Get the base rectangle of this cell in grid coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetBaseRectangleTransformed">
            <summary>
            This method returns the "rectangle" of the cell transformed into the grid's
            distorted coordinate space. The result may be a parallelogram rather than a rectangle
            depending on the shape of the axis curves.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.GetTransformedOrigin">
            <summary>
            This method finds the origin of the transformed 2d grid. Since the axes
            may not be perpendicular or intersect at all, the point is located
            at the intersection of two lines: one extending in the V direction from the start
            of the U axis, and one extending in the U direction from the start of the V axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.SetBoundaries(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Sets the clipping boundaries of this grid2d
            </summary>
            <param name="boundaries"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.ExpandLinesToBounds(Elements.Geometry.BBox3,System.Collections.Generic.List{Elements.Geometry.Line})">
            <summary>
            Modifies a list of lines intended to represent uv guides in place to hit the bounds.
            Accounts for skewed, parallel lists of 2. If list contains more lines, those will be ignored.
            </summary>
            <param name="bounds"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.Grid2d.ExtendLineSkewed(Elements.Geometry.BBox3,Elements.Geometry.Line,Elements.Geometry.Line)">
            <summary>
            Extend a line to a bounding box along a second line,
            making sure this line extends to the boundary at the endpoints of second line to account for its skew.
            Used to make sure U and V guide lines extend out far enough to encompass a boundary.
            </summary>
            <param name="bounds"></param>
            <param name="line"></param>
            <param name="possiblySkewedLine"></param>
            <returns></returns>
        </member>
        <member name="T:Elements.Spatial.GridDirection">
            <summary>
            A direction/dimension on a 2d grid.
            </summary>
        </member>
        <member name="F:Elements.Spatial.GridDirection.U">
            <summary>
            The U Direction
            </summary>
        </member>
        <member name="F:Elements.Spatial.GridDirection.V">
            <summary>
            The V Direction
            </summary>
        </member>
        <member name="T:Elements.Spatial.MercatorProjection">
            <summary>
            Methods for computing geographic coordinates using the Mercator projection.
            </summary>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.ToPixel(System.Double,System.Double)">
            <summary>
            Get the coordinates of the longitude and latitude.
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
            <returns>An array of doubles containing the x, and y coordintes, in meters.</returns>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.ToGeoCoord(System.Double,System.Double)">
            <summary>
            Get the latitude and longitude of the specified x and y coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>An array of doubles containing the longitude and latitude in degrees.</returns>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.LonToX(System.Double)">
            <summary>
            Get the x coordinate, in meters, of the specified longitude.
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.LatToY(System.Double)">
            <summary>
            Get the y coordinate, in meters, of the specified latitude.
            </summary>
            <param name="lat"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.XToLon(System.Double)">
            <summary>
            Get the longitude of the specified x coordinate.
            </summary>
            <param name="x">The x coordinate.</param>
            <returns>The longitude in degrees.</returns>
        </member>
        <member name="M:Elements.Spatial.MercatorProjection.YToLat(System.Double)">
            <summary>
            Get the latitude of the specified y coordinate.
            </summary>
            <param name="y">The y coordinate.</param>
            <returns>The latitude in degrees.</returns>
        </member>
        <member name="T:Elements.Spatial.WebMercatorProjection">
            <summary>
            Methods for computing web mercator projection tiles and coordinates.
            </summary>
        </member>
        <member name="M:Elements.Spatial.WebMercatorProjection.GetTileSizeMeters(System.Int32)">
            <summary>
            Get the tile size, in meters, for the specified zoom.
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:Elements.Spatial.WebMercatorProjection.TileIdToCenterWebMercator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the center of the mercator web tile.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="zoom"></param>
        </member>
        <member name="T:Elements.SpotLight">
            <summary>
            A spot light.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/LightTests.cs?name=spot_example)]
            </example>
        </member>
        <member name="P:Elements.SpotLight.InnerConeAngle">
            <summary>
            The inner cone angle in radians.
            </summary>
        </member>
        <member name="P:Elements.SpotLight.OuterConeAngle">
            <summary>
            The outer cone angle in radians.
            </summary>
        </member>
        <member name="M:Elements.SpotLight.#ctor(Elements.Geometry.Color,Elements.Geometry.Transform,System.Double,System.Double,System.Double,System.Guid,System.String)">
            <summary>
            Construct a spot light.
            </summary>
            <param name="innerConeAngle">The light's inner cone angle.</param>
            <param name="outerConeAngle">The light's outer cone angle.</param>
            <param name="intensity">The light's intensity measured in candela.</param>
            <param name="color">The light's color.</param>
            <param name="transform">The light's transform.</param>
            <param name="id">The light's unique identifier.</param>
            <param name="name">The light's name.</param>
            <returns></returns>
        </member>
        <member name="T:Elements.StandardWall">
            <summary>
            A wall defined by a planar curve, a height, and a thickness.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/WallTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.StandardWall.CenterLine">
            <summary>
            The center line of the wall.
            </summary>
        </member>
        <member name="P:Elements.StandardWall.Thickness">
            <summary>
            The thickness of the wall.
            </summary>
        </member>
        <member name="M:Elements.StandardWall.#ctor(Elements.Geometry.Line,System.Double,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a wall along a line.
            </summary>
            <param name="centerLine">The center line of the wall.</param>
            <param name="thickness">The thickness of the wall.</param>
            <param name="height">The height of the wall.</param>
            <param name="material">The wall's material.</param>
            <param name="transform">The transform of the wall.
            This transform will be concatenated to the transform created to describe the wall in 2D.</param>
            <param name="representation">The wall's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the wall.</param>
            <param name="name">The name of the wall.</param>
            <exception>Thrown when the height of the wall is less than or equal to zero.</exception>
            <exception>Thrown when the Z components of wall's start and end points are not the same.</exception>
        </member>
        <member name="M:Elements.StandardWall.AddOpening(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add an opening in the wall.
            </summary>
            <param name="width">The width of the opening.</param>
            <param name="height">The height of the opening.</param>
            <param name="x">The distance to the center of the opening along the center line of the wall.</param>
            <param name="y">The height to the center of the opening along the center line of the wall.</param>
            <param name="depthFront">The depth of the opening along the opening's +Z axis.</param>
            <param name="depthBack">The depth of the opening along the opening's -Z axis.</param>
        </member>
        <member name="M:Elements.StandardWall.AddOpening(Elements.Geometry.Polygon,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add an opening in the wall.
            </summary>
            <param name="perimeter">The perimeter of the opening.</param>
            <param name="x">The distance to the origin of the perimeter opening along the center line of the wall.</param>
            <param name="y">The height to the origin of the perimeter along the center line of the wall.</param>
            <param name="depthFront">The depth of the opening along the opening's +Z axis.</param>
            <param name="depthBack">The depth of the opening along the opening's -Z axis.</param>
        </member>
        <member name="M:Elements.StandardWall.UpdateRepresentations">
            <summary>
            Update solid operations.
            </summary>
        </member>
        <member name="T:Elements.StringExtensions">
            <summary>
            String utilities and extension methods. 
            </summary>
        </member>
        <member name="M:Elements.StringExtensions.NumberToString(System.Int32)">
            <summary>
            Create a string A, B, C, ... AA, AB ... from an int value
            </summary>
            <param name="value">The value to turn into a character string</param>
            <returns>A string of Upper-case characters e.g. 1=A, 2=B, 27=AA</returns>
        </member>
        <member name="T:Elements.StructuralFraming">
            <summary>
            A structural element with a profile swept along a curve.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Curve">
            <summary>
            The center line of the framing element.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.StartSetback">
            <summary>
            The setback of the framing's extrusion at the start.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.EndSetback">
            <summary>
            The setback of the framing's extrusion at the end.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Profile">
            <summary>
            The structural framing's profile.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Rotation">
            <summary>
            The profile rotation around the center curve of the beam in degrees.
            </summary>
        </member>
        <member name="M:Elements.StructuralFraming.#ctor(Elements.Geometry.Curve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double,System.Double,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a beam.
            </summary>
            <param name="curve">The center line of the beam.</param>
            <param name="profile">The structural framing's profile.</param>
            <param name="material">The structural framing's material.</param>
            <param name="startSetback">The setback distance of the beam's extrusion at its start.</param>
            <param name="endSetback">The setback distance of the beam's extrusion at its end.</param>
            <param name="rotation">An optional rotation in degrees of the transform around its z axis.</param>
            <param name="transform">The element's Transform.</param>
            <param name="representation">The structural framing's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The structural framing's id.</param>
            <param name="name">The structural framing's name.</param>
        </member>
        <member name="M:Elements.StructuralFraming.Volume">
            <summary>
            Calculate the volume of the element.
            </summary>
        </member>
        <member name="M:Elements.StructuralFraming.ProfileTransformed">
            <summary>
            Get the cross-section profile of the framing element transformed by the element's transform.
            </summary>
        </member>
        <member name="M:Elements.StructuralFraming.UpdateRepresentations">
            <summary>
            Update the representations.
            </summary>
        </member>
        <member name="T:Elements.Topography">
            <summary>
            A topographic mesh defined by an array of elevation values.
            </summary>
            <example>
            [!code-csharp[Main](../../Elements/test/TopographyTests.cs?name=example)]
            </example>
        </member>
        <member name="P:Elements.Topography.MaxElevation">
            <summary>
            The maximum elevation of the topography.
            </summary>
        </member>
        <member name="P:Elements.Topography.MinElevation">
            <summary>
            The minimum elevation of the topography.
            </summary>
        </member>
        <member name="P:Elements.Topography.Elevations">
            <summary>
            A flat list of elevation data which is used to generate the topographic
            mesh's vertices. The elevations will be used with the RowWidth property
            to convert the flat list into a square grid.
            </summary>
        </member>
        <member name="P:Elements.Topography.Origin">
            <summary>
            The origin of the topography.
            </summary>
        </member>
        <member name="P:Elements.Topography.RowWidth">
            <summary>
            The number of cells 'across' the topography.
            </summary>
        </member>
        <member name="P:Elements.Topography.CellWidth">
            <summary>
            The width of a cell.
            </summary>
        </member>
        <member name="P:Elements.Topography.CellHeight">
            <summary>
            The height of a cell.
            </summary>
        </member>
        <member name="M:Elements.Topography.#ctor(Elements.Geometry.Vector3,System.Double,System.Double[],Elements.Material,Elements.Geometry.Transform,System.Guid,System.String)">
            <summary>
            Create a topography.
            </summary>
            <param name="origin">The origin of the topography.</param>
            <param name="width">The width the topography. When constructed from a set of elevations, the
            width and the length of the topography will be the same.</param>
            <param name="elevations">An array of elevation samples which will be converted to a square array of width.</param>
            <param name="material">The topography's material.</param>
            <param name="transform">The topography's transform.</param>
            <param name="id">The topography's id.</param>
            <param name="name">The topography's name.</param>
        </member>
        <member name="M:Elements.Topography.AverageEdges(Elements.Topography,Elements.Units.CardinalDirection)">
            <summary>
            Average the vertex placement along the specified edge
            of this topography with the vertex placement along the 
            corresponding edge of a target topography.
            </summary>
            <param name="target"></param>
            <param name="edgeToAverage"></param>
        </member>
        <member name="M:Elements.Topography.GetEdgeVertices(Elements.Units.CardinalDirection)">
            <summary>
            Get the vertices along the specified edge of a square topography.
            </summary>
            <param name="direction">The edge of vertices to return.</param>
            <returns>A collection of vertices.</returns>
        </member>
        <member name="M:Elements.Topography.Subtract(Elements.Geometry.Solids.Solid,Elements.Geometry.Transform)">
            <summary>
            Subtract the provided solid from this topography.
            </summary>
            <param name="solid">The solid to subtract.</param>
            <param name="transform">A transform applied to the solid before intersection.</param>
            <returns>An array of triangles that have at least one vertex inside the solid.</returns>
        </member>
        <member name="M:Elements.Topography.UpdateRepresentations">
            <summary>
            Update the representations.
            </summary>
        </member>
        <member name="T:Elements.Units">
            <summary>
            Unit conversions and utilities.
            </summary>
        </member>
        <member name="F:Elements.Units.PI_2">
            <summary>
            Pi/2
            </summary>
        </member>
        <member name="M:Elements.Units.MetersToFeet(System.Double)">
            <summary>
            Convert from meters to feet.
            </summary>
            <param name="meters"></param>
            <returns>The provided value converted to feet.</returns>
        </member>
        <member name="M:Elements.Units.FeetToMeters(System.Double)">
            <summary>
            Convert from feet to meters.
            </summary>
            <param name="feet"></param>
            <returns>The provided value converted to meters.</returns>
        </member>
        <member name="M:Elements.Units.MetersToInches(System.Double)">
            <summary>
            Convert from meters to inches.
            </summary>
            <param name="meters"></param>
            <returns>The provided value converted to inches.</returns>
        </member>
        <member name="M:Elements.Units.InchesToMeters(System.Double)">
            <summary>
            Convert from inches to meters.
            </summary>
            <param name="inches">A value of inches.</param>
            <returns>The provided value converted to meters.</returns>
        </member>
        <member name="M:Elements.Units.DegreesToRadians(System.Double)">
            <summary>
            Convert from degrees to radians
            </summary>
            <param name="degrees"></param>
            <returns>The provided value converted to radians</returns>
        </member>
        <member name="M:Elements.Units.RadiansToDegrees(System.Double)">
            <summary>
            Convert from radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns>The provided value converted to radians.</returns>
        </member>
        <member name="M:Elements.Units.GetConversionToMeters(Elements.Units.LengthUnit)">
            <summary>
            Get the conversion factor from the provided length unit to meters.
            </summary>
            <param name="from">The length unit.</param>
        </member>
        <member name="T:Elements.Units.LengthUnit">
            <summary>
            Units of length.
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Kilometer">
            <summary>
            Kilometer
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Meter">
            <summary>
            Meter
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Centimeter">
            <summary>
            Centimeter
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Millimeter">
            <summary>
            Millimeter
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Foot">
            <summary>
            Foot
            </summary>
        </member>
        <member name="F:Elements.Units.LengthUnit.Inch">
            <summary>
            Inch
            </summary>
        </member>
        <member name="T:Elements.Units.CardinalDirection">
            <summary>
            Cardinal directions.
            </summary>
        </member>
        <member name="F:Elements.Units.CardinalDirection.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:Elements.Units.CardinalDirection.South">
            <summary>
            South
            </summary>
        </member>
        <member name="F:Elements.Units.CardinalDirection.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:Elements.Units.CardinalDirection.West">
            <summary>
            West
            </summary>
        </member>
        <member name="T:Elements.Units.UnitType">
            <summary>
            Unit types.
            </summary>        
        </member>
        <member name="F:Elements.Units.UnitType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Force">
            <summary>
            Force
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Mass">
            <summary>
            Mass
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.PlaneAngle">
            <summary>
            Plane Angle
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Pressure">
            <summary>
            Pressure
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Elements.Units.UnitType.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="T:Elements.Validators.IValidator">
            <summary>
            Implement this interface to act as a validator.
            </summary>
        </member>
        <member name="P:Elements.Validators.IValidator.ValidatesType">
            <summary>
            The type to be validated.
            </summary>
        </member>
        <member name="M:Elements.Validators.IValidator.PreConstruct(System.Object[])">
            <summary>
            Validate the object with the provided arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Elements.Validators.IValidator.PostConstruct(System.Object)">
            <summary>
            Post construction logic.
            </summary>
            <param name="obj">The constructed object.</param>
        </member>
        <member name="T:Elements.Validators.Validator">
            <summary>
            The supplier of validation logic for for element construction.
            </summary>
        </member>
        <member name="P:Elements.Validators.Validator.DisableValidationOnConstruction">
            <summary>
            Should geometry validation be disabled during construction? 
            Note: Disabling validation can have unforeseen consequences. Use with caution.
            </summary>
        </member>
        <member name="P:Elements.Validators.Validator.Instance">
            <summary>
            The validator singleton.
            </summary>
        </member>
        <member name="M:Elements.Validators.Validator.GetFirstValidatorForType``1">
            <summary>
            Gets the first validator for the supplied T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A validator for T, or null if no validator for T can be found.</returns>
        </member>
        <member name="T:Elements.Wall">
            <summary>
            A wall defined by a planar profile extruded to a height.
            </summary>
        </member>
        <member name="P:Elements.Wall.Height">
            <summary>
            The height of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.Profile">
            <summary>
            The profile of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.Openings">
            <summary>
            A collection of openings in the wall.
            </summary>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            Construct a wall by extruding a profile.
            </summary>
            <param name="profile">The plan profile of the wall.</param>
            <param name="height">The height of the wall.</param>
            <param name="material">The material of the wall.</param>
            <param name="transform">An option transform for the wall.</param>
            <param name="representation">The wall's representation.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
            <param name="id">The id of the wall.</param>
            <param name="name">The name of the wall.</param>
        </member>
        <member name="M:Elements.Wall.UpdateRepresentations">
            <summary>
            Update the representations.
            </summary>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Transform,Elements.Material,Elements.Geometry.Representation,System.Boolean,System.Guid,System.String)">
            <summary>
            A pass-through constructor to set the id, name, and transform.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="transform"></param>
            <param name="material"></param>
            <param name="representation"></param>
            <param name="isElementDefinition">Is this an element definition?</param>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Solids.Solid,Elements.Geometry.Transform,System.Boolean)">
            <summary>
            Construct a wall from geometry.
            </summary>
            <param name="geometry">The geometry of the wall.</param>
            <param name="transform">The wall's Transform.</param>
            <param name="isElementDefinition">Is this an element definition?</param>
        </member>
    </members>
</doc>
